
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cd4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001ea4  08001ea4  00002ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001eec  08001eec  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001eec  08001eec  00002eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ef4  08001ef4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ef4  08001ef4  00002ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ef8  08001ef8  00002ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001efc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000060  08001f58  00003060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08001f58  000031fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017c0  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007a6  00000000  00000000  0000484c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  00004ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000181  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abe2  00000000  00000000  000053a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c6e  00000000  00000000  0001ff8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090aed  00000000  00000000  00022bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b36e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f34  00000000  00000000  000b372c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000b4660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001e8c 	.word	0x08001e8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08001e8c 	.word	0x08001e8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <led_init>:

#define LED_BS5 (1U << 5)
#define LED_BR5 (1U << 21)


void led_init() {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 8000880:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <led_init+0x34>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000884:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <led_init+0x34>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (1U << 10);
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <led_init+0x38>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <led_init+0x38>)
 8000892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000896:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <led_init+0x38>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a05      	ldr	r2, [pc, #20]	@ (80008b4 <led_init+0x38>)
 800089e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000

080008b8 <button_init>:
void led_off(void) {
	//turn of the led
	GPIOA->BSRR |= LED_BR5;
}

void button_init(void) {
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
	// enable clock access
	RCC->AHB1ENR |= GPIOCEN;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <button_init+0x34>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c0:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <button_init+0x34>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PC13 as an input
	GPIOC->MODER &= ~(1U << 26);
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <button_init+0x38>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <button_init+0x38>)
 80008ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80008d2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U << 27);
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <button_init+0x38>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <button_init+0x38>)
 80008da:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80008de:	6013      	str	r3, [r2, #0]

}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800

080008f4 <imu_read>:
 *      Author: banele
 */

#include "imu.h"

void imu_read(uint8_t address, uint8_t * rxdata) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
      /*Set read operation*/
      address |= ICM20948_READ_OPERATION;
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000906:	b2db      	uxtb	r3, r3
 8000908:	71fb      	strb	r3, [r7, #7]
      /*Enable multi-byte*/
      //address |= ICM20948_MULTI_BYTE_ENABLE;
      /*Pull cs line low to enable slave*/
      cs1_enable();
 800090a:	f000 fa0d 	bl	8000d28 <cs1_enable>
      /*Send address*/
      spi1_transmit(&address,1);
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f9aa 	bl	8000c6c <spi1_transmit>
      /*Read 6 bytes */
      spi1_receive(rxdata,6);
 8000918:	2106      	movs	r1, #6
 800091a:	6838      	ldr	r0, [r7, #0]
 800091c:	f000 f9de 	bl	8000cdc <spi1_receive>
      /*Pull cs line high to disable slave*/
      cs1_disable();
 8000920:	f000 fa12 	bl	8000d48 <cs1_disable>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <imu_write>:
void imu_write (uint8_t address, uint8_t value) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	460a      	mov	r2, r1
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	4613      	mov	r3, r2
 800093a:	71bb      	strb	r3, [r7, #6]
  uint8_t data[2];
  /*Enable multi-byte, place address into buffer*/
  data[0] = address & 0x7F;
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000942:	b2db      	uxtb	r3, r3
 8000944:	733b      	strb	r3, [r7, #12]
  /*Place data into buffer*/
  data[1] = value;
 8000946:	79bb      	ldrb	r3, [r7, #6]
 8000948:	737b      	strb	r3, [r7, #13]
  /*Pull cs line low to enable slave*/
  cs1_enable();
 800094a:	f000 f9ed 	bl	8000d28 <cs1_enable>
  /*Transmit data and address*/
  spi1_transmit(data, 2);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2102      	movs	r1, #2
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f989 	bl	8000c6c <spi1_transmit>
  /*Pull cs line high to disable slave*/
  cs1_disable();
 800095a:	f000 f9f5 	bl	8000d48 <cs1_disable>
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <imu_init>:

void imu_init (void) {
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
    /*Enable SPI gpio*/
    spi1_gpio_init();
 800096a:	f000 f89b 	bl	8000aa4 <spi1_gpio_init>
    /*Config SPI*/
    spi1_config();
 800096e:	f000 f923 	bl	8000bb8 <spi1_config>
    /*Set data format range to +-4g*/
    /* turn on the accelerometer*/
    imu_write (CTRL1_XL, ICM20948_CTRL1_XL_CONFIG);
 8000972:	2168      	movs	r1, #104	@ 0x68
 8000974:	2010      	movs	r0, #16
 8000976:	f7ff ffd9 	bl	800092c <imu_write>
    /*Reset all bits*/
    imu_write (CTRL3_C, ICM20948_RESET);
 800097a:	2101      	movs	r1, #1
 800097c:	2012      	movs	r0, #18
 800097e:	f7ff ffd5 	bl	800092c <imu_write>
    /*Configure power control measure bit*/
    //imu_write (ICM20948_REG_POWER_CTL, ICM20948_MEASURE_BIT);
    imu_write(CTRL4_C, DISABLE_I2C);
 8000982:	2103      	movs	r1, #3
 8000984:	2013      	movs	r0, #19
 8000986:	f7ff ffd1 	bl	800092c <imu_write>

    imu_write (CTRL1_XL, ICM20948_CTRL1_XL_CONFIG);
 800098a:	2168      	movs	r1, #104	@ 0x68
 800098c:	2010      	movs	r0, #16
 800098e:	f7ff ffcd 	bl	800092c <imu_write>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <main>:
double accel_x_g, accel_y_g, accel_z_g;
uint8_t data_buffer[6];
uint8_t * add;
#define who_am_i (0x0F)
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	/*Initialize LED*/
	led_init();
 800099c:	f7ff ff6e 	bl	800087c <led_init>
	uart_init();
 80009a0:	f000 fa92 	bl	8000ec8 <uart_init>
	button_init();
 80009a4:	f7ff ff88 	bl	80008b8 <button_init>

	imu_init();
 80009a8:	f7ff ffdd 	bl	8000966 <imu_init>
	    while (1)
	    {
	         //Read accelerometer data starting from the data start
	         //register

	        imu_read(ICM20948_REG_DATA_START, data_buffer);
 80009ac:	4934      	ldr	r1, [pc, #208]	@ (8000a80 <main+0xe8>)
 80009ae:	202d      	movs	r0, #45	@ 0x2d
 80009b0:	f7ff ffa0 	bl	80008f4 <imu_read>

	        //Combine high and low bytes to form the accelerometer data
	        accel_x = (int16_t)((data_buffer[0] << 8) | data_buffer[1]);
 80009b4:	4b32      	ldr	r3, [pc, #200]	@ (8000a80 <main+0xe8>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	b21a      	sxth	r2, r3
 80009be:	4b30      	ldr	r3, [pc, #192]	@ (8000a80 <main+0xe8>)
 80009c0:	785b      	ldrb	r3, [r3, #1]
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21a      	sxth	r2, r3
 80009c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a84 <main+0xec>)
 80009ca:	801a      	strh	r2, [r3, #0]
	        accel_y = (int16_t)((data_buffer[2] << 8) | data_buffer[3]);
 80009cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a80 <main+0xe8>)
 80009ce:	789b      	ldrb	r3, [r3, #2]
 80009d0:	b21b      	sxth	r3, r3
 80009d2:	021b      	lsls	r3, r3, #8
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a80 <main+0xe8>)
 80009d8:	78db      	ldrb	r3, [r3, #3]
 80009da:	b21b      	sxth	r3, r3
 80009dc:	4313      	orrs	r3, r2
 80009de:	b21a      	sxth	r2, r3
 80009e0:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <main+0xf0>)
 80009e2:	801a      	strh	r2, [r3, #0]
	        accel_z = (int16_t)((data_buffer[4] << 8) | data_buffer[5]);
 80009e4:	4b26      	ldr	r3, [pc, #152]	@ (8000a80 <main+0xe8>)
 80009e6:	791b      	ldrb	r3, [r3, #4]
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	b21a      	sxth	r2, r3
 80009ee:	4b24      	ldr	r3, [pc, #144]	@ (8000a80 <main+0xe8>)
 80009f0:	795b      	ldrb	r3, [r3, #5]
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b21a      	sxth	r2, r3
 80009f8:	4b24      	ldr	r3, [pc, #144]	@ (8000a8c <main+0xf4>)
 80009fa:	801a      	strh	r2, [r3, #0]
	        // Convert raw data to g values
	        accel_x_g = accel_x * 0.0078;
 80009fc:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <main+0xec>)
 80009fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fed0 	bl	80007a8 <__aeabi_i2d>
 8000a08:	a31b      	add	r3, pc, #108	@ (adr r3, 8000a78 <main+0xe0>)
 8000a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a0e:	f7ff fc4f 	bl	80002b0 <__aeabi_dmul>
 8000a12:	4602      	mov	r2, r0
 8000a14:	460b      	mov	r3, r1
 8000a16:	491e      	ldr	r1, [pc, #120]	@ (8000a90 <main+0xf8>)
 8000a18:	e9c1 2300 	strd	r2, r3, [r1]
	        accel_y_g = accel_y * 0.0078;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <main+0xf0>)
 8000a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fec0 	bl	80007a8 <__aeabi_i2d>
 8000a28:	a313      	add	r3, pc, #76	@ (adr r3, 8000a78 <main+0xe0>)
 8000a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a2e:	f7ff fc3f 	bl	80002b0 <__aeabi_dmul>
 8000a32:	4602      	mov	r2, r0
 8000a34:	460b      	mov	r3, r1
 8000a36:	4917      	ldr	r1, [pc, #92]	@ (8000a94 <main+0xfc>)
 8000a38:	e9c1 2300 	strd	r2, r3, [r1]
	        accel_z_g = accel_z * 0.0078;
 8000a3c:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <main+0xf4>)
 8000a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff feb0 	bl	80007a8 <__aeabi_i2d>
 8000a48:	a30b      	add	r3, pc, #44	@ (adr r3, 8000a78 <main+0xe0>)
 8000a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a4e:	f7ff fc2f 	bl	80002b0 <__aeabi_dmul>
 8000a52:	4602      	mov	r2, r0
 8000a54:	460b      	mov	r3, r1
 8000a56:	4910      	ldr	r1, [pc, #64]	@ (8000a98 <main+0x100>)
 8000a58:	e9c1 2300 	strd	r2, r3, [r1]
	        //Print values for debugging purposes
	    	imu_read(who_am_i, add);
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <main+0x104>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	200f      	movs	r0, #15
 8000a64:	f7ff ff46 	bl	80008f4 <imu_read>

	        //printf("accel_x : %d accel_y : %d  accel_z : %d\n",accel_x,accel_y,accel_z);

	    	printf("IICM20948 : 0x%02X\n", who_am_i);
 8000a68:	210f      	movs	r1, #15
 8000a6a:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <main+0x108>)
 8000a6c:	f000 fba4 	bl	80011b8 <iprintf>
	        imu_read(ICM20948_REG_DATA_START, data_buffer);
 8000a70:	bf00      	nop
 8000a72:	e79b      	b.n	80009ac <main+0x14>
 8000a74:	f3af 8000 	nop.w
 8000a78:	8e8a71de 	.word	0x8e8a71de
 8000a7c:	3f7ff2e4 	.word	0x3f7ff2e4
 8000a80:	200000a0 	.word	0x200000a0
 8000a84:	2000007c 	.word	0x2000007c
 8000a88:	2000007e 	.word	0x2000007e
 8000a8c:	20000080 	.word	0x20000080
 8000a90:	20000088 	.word	0x20000088
 8000a94:	20000090 	.word	0x20000090
 8000a98:	20000098 	.word	0x20000098
 8000a9c:	200000a8 	.word	0x200000a8
 8000aa0:	08001ea4 	.word	0x08001ea4

08000aa4 <spi1_gpio_init>:
#define SR_TXE            (1U<<1)
#define SR_RXNE            (1U<<0)
#define SR_BSY            (1U<<7)

void spi1_gpio_init(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
    /*Enable clock access to GPIOA*/
    RCC->AHB1ENR |= GPIOAEN;
 8000aa8:	4b41      	ldr	r3, [pc, #260]	@ (8000bb0 <spi1_gpio_init+0x10c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aac:	4a40      	ldr	r2, [pc, #256]	@ (8000bb0 <spi1_gpio_init+0x10c>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6313      	str	r3, [r2, #48]	@ 0x30
    /*Set PA5,PA6,PA7 mode to alternate function*/
    /*PA5*/
    GPIOA->MODER &=~(1U<<10);
 8000ab4:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a3e      	ldr	r2, [pc, #248]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000aba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000abe:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=(1U<<11);
 8000ac0:	4b3c      	ldr	r3, [pc, #240]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a3b      	ldr	r2, [pc, #236]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000ac6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000aca:	6013      	str	r3, [r2, #0]
    /*PA6*/
    GPIOA->MODER &=~(1U<<12);
 8000acc:	4b39      	ldr	r3, [pc, #228]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a38      	ldr	r2, [pc, #224]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000ad2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ad6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=(1U<<13);
 8000ad8:	4b36      	ldr	r3, [pc, #216]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a35      	ldr	r2, [pc, #212]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000ade:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ae2:	6013      	str	r3, [r2, #0]
    /*PA7*/
    GPIOA->MODER &=~(1U<<14);
 8000ae4:	4b33      	ldr	r3, [pc, #204]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a32      	ldr	r2, [pc, #200]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000aea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000aee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=(1U<<15);
 8000af0:	4b30      	ldr	r3, [pc, #192]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a2f      	ldr	r2, [pc, #188]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000afa:	6013      	str	r3, [r2, #0]

    /*Set PA9 as output pin*/
    GPIOA->MODER |=(1U<<18);
 8000afc:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a2c      	ldr	r2, [pc, #176]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b06:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &=~(1U<<19);
 8000b08:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a29      	ldr	r2, [pc, #164]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b0e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000b12:	6013      	str	r3, [r2, #0]

    //Set PA5,PA6,PA7 alternate function type to SPI1
    //PA5
    GPIOA->AFR[0] |=(1U<<20);
 8000b14:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	4a26      	ldr	r2, [pc, #152]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b1e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<21);
 8000b20:	4b24      	ldr	r3, [pc, #144]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	4a23      	ldr	r2, [pc, #140]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b2a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<22);
 8000b2c:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	4a20      	ldr	r2, [pc, #128]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b36:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<23);
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b3a:	6a1b      	ldr	r3, [r3, #32]
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b3e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000b42:	6213      	str	r3, [r2, #32]
    //PA6
    GPIOA->AFR[0] |=(1U<<24);
 8000b44:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b4e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<25);
 8000b50:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	4a17      	ldr	r2, [pc, #92]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b56:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000b5a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<26);
 8000b5c:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b5e:	6a1b      	ldr	r3, [r3, #32]
 8000b60:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b66:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<27);
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b6a:	6a1b      	ldr	r3, [r3, #32]
 8000b6c:	4a11      	ldr	r2, [pc, #68]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b6e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000b72:	6213      	str	r3, [r2, #32]
    //PA7
    GPIOA->AFR[0] |=(1U<<28);
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<29);
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b82:	6a1b      	ldr	r3, [r3, #32]
 8000b84:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b86:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000b8a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<30);
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b8e:	6a1b      	ldr	r3, [r3, #32]
 8000b90:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000b96:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<31);
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <spi1_gpio_init+0x110>)
 8000b9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ba2:	6213      	str	r3, [r2, #32]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <spi1_config>:

void spi1_config(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
    //Enable clock access to SPI1 module
    RCC->APB2ENR |= SPI1EN;
 8000bbc:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <spi1_config+0xac>)
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc0:	4a28      	ldr	r2, [pc, #160]	@ (8000c64 <spi1_config+0xac>)
 8000bc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bc6:	6453      	str	r3, [r2, #68]	@ 0x44

    //Set 8 bit data mode
    SPI1->CR1 &= ~(1U<<11);
 8000bc8:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <spi1_config+0xb0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a26      	ldr	r2, [pc, #152]	@ (8000c68 <spi1_config+0xb0>)
 8000bce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000bd2:	6013      	str	r3, [r2, #0]

    //Enable full duplex
    SPI1->CR1 &=~(1U<<10);
 8000bd4:	4b24      	ldr	r3, [pc, #144]	@ (8000c68 <spi1_config+0xb0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a23      	ldr	r2, [pc, #140]	@ (8000c68 <spi1_config+0xb0>)
 8000bda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000bde:	6013      	str	r3, [r2, #0]

    //Select software slave management by
    //setting SSM=1 and SSI=1
    SPI1->CR1 |= (1<<8);
 8000be0:	4b21      	ldr	r3, [pc, #132]	@ (8000c68 <spi1_config+0xb0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a20      	ldr	r2, [pc, #128]	@ (8000c68 <spi1_config+0xb0>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bea:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1<<9);
 8000bec:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <spi1_config+0xb0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c68 <spi1_config+0xb0>)
 8000bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bf6:	6013      	str	r3, [r2, #0]

    //Set MSB first
    SPI1->CR1 &= ~(1U<<7);
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <spi1_config+0xb0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c68 <spi1_config+0xb0>)
 8000bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c02:	6013      	str	r3, [r2, #0]

    //Set clock to fPCLK/64
    SPI1->CR1 |= (1U<<3);
 8000c04:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <spi1_config+0xb0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a17      	ldr	r2, [pc, #92]	@ (8000c68 <spi1_config+0xb0>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1U<<4);
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <spi1_config+0xb0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a14      	ldr	r2, [pc, #80]	@ (8000c68 <spi1_config+0xb0>)
 8000c16:	f023 0310 	bic.w	r3, r3, #16
 8000c1a:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1U<<5);
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <spi1_config+0xb0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a11      	ldr	r2, [pc, #68]	@ (8000c68 <spi1_config+0xb0>)
 8000c22:	f043 0320 	orr.w	r3, r3, #32
 8000c26:	6013      	str	r3, [r2, #0]

    //Set mode to MASTER
    SPI1->CR1 |= (1U<<2);
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <spi1_config+0xb0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c68 <spi1_config+0xb0>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6013      	str	r3, [r2, #0]

    //Set CPOL to 1 and CPHA to 1
    SPI1->CR1 |= (1U<<0);
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <spi1_config+0xb0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <spi1_config+0xb0>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1U<<1);
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <spi1_config+0xb0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <spi1_config+0xb0>)
 8000c46:	f043 0302 	orr.w	r3, r3, #2
 8000c4a:	6013      	str	r3, [r2, #0]

    //Enable SPI module
    SPI1->CR1 |= (1<<6);
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <spi1_config+0xb0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <spi1_config+0xb0>)
 8000c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40013000 	.word	0x40013000

08000c6c <spi1_transmit>:
    //Enable SPI module
    SPI4->CR1 |= (1<<6);
}

void spi1_transmit(uint8_t *data,uint32_t size)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
    uint32_t i=0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
    uint8_t temp;
    while(i<size)
 8000c7a:	e00f      	b.n	8000c9c <spi1_transmit+0x30>
    {
        //Wait until TXE is set
        while(!(SPI1->SR & (SR_TXE))){}
 8000c7c:	bf00      	nop
 8000c7e:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <spi1_transmit+0x6c>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f9      	beq.n	8000c7e <spi1_transmit+0x12>
        //Write the data to the data register
        SPI1->DR = data[i];
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <spi1_transmit+0x6c>)
 8000c94:	60da      	str	r2, [r3, #12]
        i++;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
    while(i<size)
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d3eb      	bcc.n	8000c7c <spi1_transmit+0x10>
    }
    //Wait until TXE is set
    while(!(SPI1->SR & (SR_TXE))){}
 8000ca4:	bf00      	nop
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <spi1_transmit+0x6c>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0f9      	beq.n	8000ca6 <spi1_transmit+0x3a>
    //Wait for BUSY flag to reset
    while((SPI1->SR & (SR_BSY))){}
 8000cb2:	bf00      	nop
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <spi1_transmit+0x6c>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f9      	bne.n	8000cb4 <spi1_transmit+0x48>
    //Clear OVR flag
    temp = SPI1->DR;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <spi1_transmit+0x6c>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	72fb      	strb	r3, [r7, #11]
    temp = SPI1->SR;
 8000cc6:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <spi1_transmit+0x6c>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	72fb      	strb	r3, [r7, #11]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	40013000 	.word	0x40013000

08000cdc <spi1_receive>:
    temp = SPI4->DR;
    temp = SPI4->SR;
}

void spi1_receive(uint8_t *data,uint32_t size)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
    while(size)
 8000ce6:	e013      	b.n	8000d10 <spi1_receive+0x34>
    {
        //Send dummy data
        SPI1->DR =0;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <spi1_receive+0x48>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
        //Wait for RXNE flag to be set
        while(!(SPI1->SR & (SR_RXNE))){}
 8000cee:	bf00      	nop
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <spi1_receive+0x48>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f9      	beq.n	8000cf0 <spi1_receive+0x14>
        //Read data from data register
        *data++ = (SPI1->DR);
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <spi1_receive+0x48>)
 8000cfe:	68d9      	ldr	r1, [r3, #12]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
        size--;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	603b      	str	r3, [r7, #0]
    while(size)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1e8      	bne.n	8000ce8 <spi1_receive+0xc>
    }
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40013000 	.word	0x40013000

08000d28 <cs1_enable>:
        size--;
    }
}

void cs1_enable(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
    GPIOA->ODR &=~(1U<<9);
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <cs1_enable+0x1c>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	4a04      	ldr	r2, [pc, #16]	@ (8000d44 <cs1_enable+0x1c>)
 8000d32:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000d36:	6153      	str	r3, [r2, #20]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40020000 	.word	0x40020000

08000d48 <cs1_disable>:
}

//Pull high to disable

void cs1_disable(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
    GPIOA->ODR |=(1U<<9);
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <cs1_disable+0x1c>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <cs1_disable+0x1c>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d56:	6153      	str	r3, [r2, #20]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40020000 	.word	0x40020000

08000d68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e00a      	b.n	8000d90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d7a:	f3af 8000 	nop.w
 8000d7e:	4601      	mov	r1, r0
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	60ba      	str	r2, [r7, #8]
 8000d86:	b2ca      	uxtb	r2, r1
 8000d88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbf0      	blt.n	8000d7a <_read+0x12>
  }

  return len;
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e009      	b.n	8000dc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	60ba      	str	r2, [r7, #8]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f877 	bl	8000eb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dbf1      	blt.n	8000db4 <_write+0x12>
  }
  return len;
 8000dd0:	687b      	ldr	r3, [r7, #4]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <_close>:

int _close(int file)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e02:	605a      	str	r2, [r3, #4]
  return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_isatty>:

int _isatty(int file)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d207      	bcs.n	8000e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e74:	f000 f9ba 	bl	80011ec <__errno>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e82:	e009      	b.n	8000e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <_sbrk+0x64>)
 8000e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20020000 	.word	0x20020000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	200000ac 	.word	0x200000ac
 8000eac:	20000200 	.word	0x20000200

08000eb0 <__io_putchar>:
#define SR_TXE (1U << 7)

static void uart_set_baudrate(uint32_t  pheriph_clock, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f851 	bl	8000f60 <uart_write>
	return ch;
 8000ebe:	687b      	ldr	r3, [r7, #4]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <uart_init>:


void uart_init(void) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= GPIOAEN;
 8000ecc:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <uart_init+0x88>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8000f50 <uart_init+0x88>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6313      	str	r3, [r2, #48]	@ 0x30
	//SET MODE PA2 TO ALTERNATE
	GPIOA->MODER &= ~(1U << 4);
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <uart_init+0x8c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <uart_init+0x8c>)
 8000ede:	f023 0310 	bic.w	r3, r3, #16
 8000ee2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <uart_init+0x8c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f54 <uart_init+0x8c>)
 8000eea:	f043 0320 	orr.w	r3, r3, #32
 8000eee:	6013      	str	r3, [r2, #0]

	//SET ALTERNATE FUNCTION TYPE TO AF7(UART_TX)

	GPIOA->AFR[0]  |= (1U << 8);
 8000ef0:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <uart_init+0x8c>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4a17      	ldr	r2, [pc, #92]	@ (8000f54 <uart_init+0x8c>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000efa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |= (1U << 9);
 8000efc:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <uart_init+0x8c>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <uart_init+0x8c>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f06:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |= (1U << 10);
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <uart_init+0x8c>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <uart_init+0x8c>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f12:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  &= ~(1U << 1);
 8000f14:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <uart_init+0x8c>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	4a0e      	ldr	r2, [pc, #56]	@ (8000f54 <uart_init+0x8c>)
 8000f1a:	f023 0302 	bic.w	r3, r3, #2
 8000f1e:	6213      	str	r3, [r2, #32]
	//ENABLE CLK
	RCC->APB1ENR = UART2EN;
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <uart_init+0x88>)
 8000f22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f26:	641a      	str	r2, [r3, #64]	@ 0x40
	//uart_set baudrate
	uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8000f28:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000f2c:	480a      	ldr	r0, [pc, #40]	@ (8000f58 <uart_init+0x90>)
 8000f2e:	f000 f843 	bl	8000fb8 <uart_set_baudrate>
	//configure transfer direction
	USART2->CR1 |= CR1_TE;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <uart_init+0x94>)
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	4a09      	ldr	r2, [pc, #36]	@ (8000f5c <uart_init+0x94>)
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	60d3      	str	r3, [r2, #12]
	//enable uart
	USART2->CR1 |= CR1_UE;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <uart_init+0x94>)
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <uart_init+0x94>)
 8000f44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f48:	60d3      	str	r3, [r2, #12]

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	00f42400 	.word	0x00f42400
 8000f5c:	40004400 	.word	0x40004400

08000f60 <uart_write>:

static void uart_write(int ch)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    /*Make sure transmit data register is empty*/
    while(!(USART2->SR & SR_TXE)){}
 8000f68:	bf00      	nop
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <uart_write+0x2c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f9      	beq.n	8000f6a <uart_write+0xa>
    /*Write to transmit data register*/
    USART2->DR =(ch & 0xFF);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <uart_write+0x2c>)
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	6053      	str	r3, [r2, #4]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40004400 	.word	0x40004400

08000f90 <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
    return((periph_clk + (baudrate/2U))/baudrate);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	085a      	lsrs	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	441a      	add	r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa8:	b29b      	uxth	r3, r3
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
    USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000fc2:	6839      	ldr	r1, [r7, #0]
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ffe3 	bl	8000f90 <compute_uart_bd>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <uart_set_baudrate+0x24>)
 8000fd0:	609a      	str	r2, [r3, #8]
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40004400 	.word	0x40004400

08000fe0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fe0:	480d      	ldr	r0, [pc, #52]	@ (8001018 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fe2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800100e:	f000 f8f3 	bl	80011f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001012:	f7ff fcc1 	bl	8000998 <main>

08001016 <LoopForever>:

LoopForever:
  b LoopForever
 8001016:	e7fe      	b.n	8001016 <LoopForever>
  ldr   r0, =_estack
 8001018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001024:	08001efc 	.word	0x08001efc
  ldr r2, =_sbss
 8001028:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800102c:	200001fc 	.word	0x200001fc

08001030 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <std>:
 8001034:	2300      	movs	r3, #0
 8001036:	b510      	push	{r4, lr}
 8001038:	4604      	mov	r4, r0
 800103a:	e9c0 3300 	strd	r3, r3, [r0]
 800103e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001042:	6083      	str	r3, [r0, #8]
 8001044:	8181      	strh	r1, [r0, #12]
 8001046:	6643      	str	r3, [r0, #100]	@ 0x64
 8001048:	81c2      	strh	r2, [r0, #14]
 800104a:	6183      	str	r3, [r0, #24]
 800104c:	4619      	mov	r1, r3
 800104e:	2208      	movs	r2, #8
 8001050:	305c      	adds	r0, #92	@ 0x5c
 8001052:	f000 f8c3 	bl	80011dc <memset>
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <std+0x58>)
 8001058:	6263      	str	r3, [r4, #36]	@ 0x24
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <std+0x5c>)
 800105c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800105e:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <std+0x60>)
 8001060:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <std+0x64>)
 8001064:	6323      	str	r3, [r4, #48]	@ 0x30
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <std+0x68>)
 8001068:	6224      	str	r4, [r4, #32]
 800106a:	429c      	cmp	r4, r3
 800106c:	d006      	beq.n	800107c <std+0x48>
 800106e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001072:	4294      	cmp	r4, r2
 8001074:	d002      	beq.n	800107c <std+0x48>
 8001076:	33d0      	adds	r3, #208	@ 0xd0
 8001078:	429c      	cmp	r4, r3
 800107a:	d105      	bne.n	8001088 <std+0x54>
 800107c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001084:	f000 b8dc 	b.w	8001240 <__retarget_lock_init_recursive>
 8001088:	bd10      	pop	{r4, pc}
 800108a:	bf00      	nop
 800108c:	08001a95 	.word	0x08001a95
 8001090:	08001ab7 	.word	0x08001ab7
 8001094:	08001aef 	.word	0x08001aef
 8001098:	08001b13 	.word	0x08001b13
 800109c:	200000b0 	.word	0x200000b0

080010a0 <stdio_exit_handler>:
 80010a0:	4a02      	ldr	r2, [pc, #8]	@ (80010ac <stdio_exit_handler+0xc>)
 80010a2:	4903      	ldr	r1, [pc, #12]	@ (80010b0 <stdio_exit_handler+0x10>)
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <stdio_exit_handler+0x14>)
 80010a6:	f000 b869 	b.w	800117c <_fwalk_sglue>
 80010aa:	bf00      	nop
 80010ac:	20000000 	.word	0x20000000
 80010b0:	08001a2d 	.word	0x08001a2d
 80010b4:	20000010 	.word	0x20000010

080010b8 <cleanup_stdio>:
 80010b8:	6841      	ldr	r1, [r0, #4]
 80010ba:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <cleanup_stdio+0x34>)
 80010bc:	4299      	cmp	r1, r3
 80010be:	b510      	push	{r4, lr}
 80010c0:	4604      	mov	r4, r0
 80010c2:	d001      	beq.n	80010c8 <cleanup_stdio+0x10>
 80010c4:	f000 fcb2 	bl	8001a2c <_fflush_r>
 80010c8:	68a1      	ldr	r1, [r4, #8]
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <cleanup_stdio+0x38>)
 80010cc:	4299      	cmp	r1, r3
 80010ce:	d002      	beq.n	80010d6 <cleanup_stdio+0x1e>
 80010d0:	4620      	mov	r0, r4
 80010d2:	f000 fcab 	bl	8001a2c <_fflush_r>
 80010d6:	68e1      	ldr	r1, [r4, #12]
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <cleanup_stdio+0x3c>)
 80010da:	4299      	cmp	r1, r3
 80010dc:	d004      	beq.n	80010e8 <cleanup_stdio+0x30>
 80010de:	4620      	mov	r0, r4
 80010e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010e4:	f000 bca2 	b.w	8001a2c <_fflush_r>
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	bf00      	nop
 80010ec:	200000b0 	.word	0x200000b0
 80010f0:	20000118 	.word	0x20000118
 80010f4:	20000180 	.word	0x20000180

080010f8 <global_stdio_init.part.0>:
 80010f8:	b510      	push	{r4, lr}
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <global_stdio_init.part.0+0x30>)
 80010fc:	4c0b      	ldr	r4, [pc, #44]	@ (800112c <global_stdio_init.part.0+0x34>)
 80010fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <global_stdio_init.part.0+0x38>)
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	4620      	mov	r0, r4
 8001104:	2200      	movs	r2, #0
 8001106:	2104      	movs	r1, #4
 8001108:	f7ff ff94 	bl	8001034 <std>
 800110c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001110:	2201      	movs	r2, #1
 8001112:	2109      	movs	r1, #9
 8001114:	f7ff ff8e 	bl	8001034 <std>
 8001118:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800111c:	2202      	movs	r2, #2
 800111e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001122:	2112      	movs	r1, #18
 8001124:	f7ff bf86 	b.w	8001034 <std>
 8001128:	200001e8 	.word	0x200001e8
 800112c:	200000b0 	.word	0x200000b0
 8001130:	080010a1 	.word	0x080010a1

08001134 <__sfp_lock_acquire>:
 8001134:	4801      	ldr	r0, [pc, #4]	@ (800113c <__sfp_lock_acquire+0x8>)
 8001136:	f000 b884 	b.w	8001242 <__retarget_lock_acquire_recursive>
 800113a:	bf00      	nop
 800113c:	200001ed 	.word	0x200001ed

08001140 <__sfp_lock_release>:
 8001140:	4801      	ldr	r0, [pc, #4]	@ (8001148 <__sfp_lock_release+0x8>)
 8001142:	f000 b87f 	b.w	8001244 <__retarget_lock_release_recursive>
 8001146:	bf00      	nop
 8001148:	200001ed 	.word	0x200001ed

0800114c <__sinit>:
 800114c:	b510      	push	{r4, lr}
 800114e:	4604      	mov	r4, r0
 8001150:	f7ff fff0 	bl	8001134 <__sfp_lock_acquire>
 8001154:	6a23      	ldr	r3, [r4, #32]
 8001156:	b11b      	cbz	r3, 8001160 <__sinit+0x14>
 8001158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800115c:	f7ff bff0 	b.w	8001140 <__sfp_lock_release>
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <__sinit+0x28>)
 8001162:	6223      	str	r3, [r4, #32]
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <__sinit+0x2c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f5      	bne.n	8001158 <__sinit+0xc>
 800116c:	f7ff ffc4 	bl	80010f8 <global_stdio_init.part.0>
 8001170:	e7f2      	b.n	8001158 <__sinit+0xc>
 8001172:	bf00      	nop
 8001174:	080010b9 	.word	0x080010b9
 8001178:	200001e8 	.word	0x200001e8

0800117c <_fwalk_sglue>:
 800117c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001180:	4607      	mov	r7, r0
 8001182:	4688      	mov	r8, r1
 8001184:	4614      	mov	r4, r2
 8001186:	2600      	movs	r6, #0
 8001188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800118c:	f1b9 0901 	subs.w	r9, r9, #1
 8001190:	d505      	bpl.n	800119e <_fwalk_sglue+0x22>
 8001192:	6824      	ldr	r4, [r4, #0]
 8001194:	2c00      	cmp	r4, #0
 8001196:	d1f7      	bne.n	8001188 <_fwalk_sglue+0xc>
 8001198:	4630      	mov	r0, r6
 800119a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800119e:	89ab      	ldrh	r3, [r5, #12]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d907      	bls.n	80011b4 <_fwalk_sglue+0x38>
 80011a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80011a8:	3301      	adds	r3, #1
 80011aa:	d003      	beq.n	80011b4 <_fwalk_sglue+0x38>
 80011ac:	4629      	mov	r1, r5
 80011ae:	4638      	mov	r0, r7
 80011b0:	47c0      	blx	r8
 80011b2:	4306      	orrs	r6, r0
 80011b4:	3568      	adds	r5, #104	@ 0x68
 80011b6:	e7e9      	b.n	800118c <_fwalk_sglue+0x10>

080011b8 <iprintf>:
 80011b8:	b40f      	push	{r0, r1, r2, r3}
 80011ba:	b507      	push	{r0, r1, r2, lr}
 80011bc:	4906      	ldr	r1, [pc, #24]	@ (80011d8 <iprintf+0x20>)
 80011be:	ab04      	add	r3, sp, #16
 80011c0:	6808      	ldr	r0, [r1, #0]
 80011c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80011c6:	6881      	ldr	r1, [r0, #8]
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f000 f865 	bl	8001298 <_vfiprintf_r>
 80011ce:	b003      	add	sp, #12
 80011d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80011d4:	b004      	add	sp, #16
 80011d6:	4770      	bx	lr
 80011d8:	2000000c 	.word	0x2000000c

080011dc <memset>:
 80011dc:	4402      	add	r2, r0
 80011de:	4603      	mov	r3, r0
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d100      	bne.n	80011e6 <memset+0xa>
 80011e4:	4770      	bx	lr
 80011e6:	f803 1b01 	strb.w	r1, [r3], #1
 80011ea:	e7f9      	b.n	80011e0 <memset+0x4>

080011ec <__errno>:
 80011ec:	4b01      	ldr	r3, [pc, #4]	@ (80011f4 <__errno+0x8>)
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	2000000c 	.word	0x2000000c

080011f8 <__libc_init_array>:
 80011f8:	b570      	push	{r4, r5, r6, lr}
 80011fa:	4d0d      	ldr	r5, [pc, #52]	@ (8001230 <__libc_init_array+0x38>)
 80011fc:	4c0d      	ldr	r4, [pc, #52]	@ (8001234 <__libc_init_array+0x3c>)
 80011fe:	1b64      	subs	r4, r4, r5
 8001200:	10a4      	asrs	r4, r4, #2
 8001202:	2600      	movs	r6, #0
 8001204:	42a6      	cmp	r6, r4
 8001206:	d109      	bne.n	800121c <__libc_init_array+0x24>
 8001208:	4d0b      	ldr	r5, [pc, #44]	@ (8001238 <__libc_init_array+0x40>)
 800120a:	4c0c      	ldr	r4, [pc, #48]	@ (800123c <__libc_init_array+0x44>)
 800120c:	f000 fe3e 	bl	8001e8c <_init>
 8001210:	1b64      	subs	r4, r4, r5
 8001212:	10a4      	asrs	r4, r4, #2
 8001214:	2600      	movs	r6, #0
 8001216:	42a6      	cmp	r6, r4
 8001218:	d105      	bne.n	8001226 <__libc_init_array+0x2e>
 800121a:	bd70      	pop	{r4, r5, r6, pc}
 800121c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001220:	4798      	blx	r3
 8001222:	3601      	adds	r6, #1
 8001224:	e7ee      	b.n	8001204 <__libc_init_array+0xc>
 8001226:	f855 3b04 	ldr.w	r3, [r5], #4
 800122a:	4798      	blx	r3
 800122c:	3601      	adds	r6, #1
 800122e:	e7f2      	b.n	8001216 <__libc_init_array+0x1e>
 8001230:	08001ef4 	.word	0x08001ef4
 8001234:	08001ef4 	.word	0x08001ef4
 8001238:	08001ef4 	.word	0x08001ef4
 800123c:	08001ef8 	.word	0x08001ef8

08001240 <__retarget_lock_init_recursive>:
 8001240:	4770      	bx	lr

08001242 <__retarget_lock_acquire_recursive>:
 8001242:	4770      	bx	lr

08001244 <__retarget_lock_release_recursive>:
 8001244:	4770      	bx	lr

08001246 <__sfputc_r>:
 8001246:	6893      	ldr	r3, [r2, #8]
 8001248:	3b01      	subs	r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	b410      	push	{r4}
 800124e:	6093      	str	r3, [r2, #8]
 8001250:	da08      	bge.n	8001264 <__sfputc_r+0x1e>
 8001252:	6994      	ldr	r4, [r2, #24]
 8001254:	42a3      	cmp	r3, r4
 8001256:	db01      	blt.n	800125c <__sfputc_r+0x16>
 8001258:	290a      	cmp	r1, #10
 800125a:	d103      	bne.n	8001264 <__sfputc_r+0x1e>
 800125c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001260:	f000 bc5b 	b.w	8001b1a <__swbuf_r>
 8001264:	6813      	ldr	r3, [r2, #0]
 8001266:	1c58      	adds	r0, r3, #1
 8001268:	6010      	str	r0, [r2, #0]
 800126a:	7019      	strb	r1, [r3, #0]
 800126c:	4608      	mov	r0, r1
 800126e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001272:	4770      	bx	lr

08001274 <__sfputs_r>:
 8001274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001276:	4606      	mov	r6, r0
 8001278:	460f      	mov	r7, r1
 800127a:	4614      	mov	r4, r2
 800127c:	18d5      	adds	r5, r2, r3
 800127e:	42ac      	cmp	r4, r5
 8001280:	d101      	bne.n	8001286 <__sfputs_r+0x12>
 8001282:	2000      	movs	r0, #0
 8001284:	e007      	b.n	8001296 <__sfputs_r+0x22>
 8001286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800128a:	463a      	mov	r2, r7
 800128c:	4630      	mov	r0, r6
 800128e:	f7ff ffda 	bl	8001246 <__sfputc_r>
 8001292:	1c43      	adds	r3, r0, #1
 8001294:	d1f3      	bne.n	800127e <__sfputs_r+0xa>
 8001296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001298 <_vfiprintf_r>:
 8001298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800129c:	460d      	mov	r5, r1
 800129e:	b09d      	sub	sp, #116	@ 0x74
 80012a0:	4614      	mov	r4, r2
 80012a2:	4698      	mov	r8, r3
 80012a4:	4606      	mov	r6, r0
 80012a6:	b118      	cbz	r0, 80012b0 <_vfiprintf_r+0x18>
 80012a8:	6a03      	ldr	r3, [r0, #32]
 80012aa:	b90b      	cbnz	r3, 80012b0 <_vfiprintf_r+0x18>
 80012ac:	f7ff ff4e 	bl	800114c <__sinit>
 80012b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80012b2:	07d9      	lsls	r1, r3, #31
 80012b4:	d405      	bmi.n	80012c2 <_vfiprintf_r+0x2a>
 80012b6:	89ab      	ldrh	r3, [r5, #12]
 80012b8:	059a      	lsls	r2, r3, #22
 80012ba:	d402      	bmi.n	80012c2 <_vfiprintf_r+0x2a>
 80012bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80012be:	f7ff ffc0 	bl	8001242 <__retarget_lock_acquire_recursive>
 80012c2:	89ab      	ldrh	r3, [r5, #12]
 80012c4:	071b      	lsls	r3, r3, #28
 80012c6:	d501      	bpl.n	80012cc <_vfiprintf_r+0x34>
 80012c8:	692b      	ldr	r3, [r5, #16]
 80012ca:	b99b      	cbnz	r3, 80012f4 <_vfiprintf_r+0x5c>
 80012cc:	4629      	mov	r1, r5
 80012ce:	4630      	mov	r0, r6
 80012d0:	f000 fc62 	bl	8001b98 <__swsetup_r>
 80012d4:	b170      	cbz	r0, 80012f4 <_vfiprintf_r+0x5c>
 80012d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80012d8:	07dc      	lsls	r4, r3, #31
 80012da:	d504      	bpl.n	80012e6 <_vfiprintf_r+0x4e>
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e0:	b01d      	add	sp, #116	@ 0x74
 80012e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012e6:	89ab      	ldrh	r3, [r5, #12]
 80012e8:	0598      	lsls	r0, r3, #22
 80012ea:	d4f7      	bmi.n	80012dc <_vfiprintf_r+0x44>
 80012ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80012ee:	f7ff ffa9 	bl	8001244 <__retarget_lock_release_recursive>
 80012f2:	e7f3      	b.n	80012dc <_vfiprintf_r+0x44>
 80012f4:	2300      	movs	r3, #0
 80012f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80012f8:	2320      	movs	r3, #32
 80012fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80012fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8001302:	2330      	movs	r3, #48	@ 0x30
 8001304:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80014b4 <_vfiprintf_r+0x21c>
 8001308:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800130c:	f04f 0901 	mov.w	r9, #1
 8001310:	4623      	mov	r3, r4
 8001312:	469a      	mov	sl, r3
 8001314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001318:	b10a      	cbz	r2, 800131e <_vfiprintf_r+0x86>
 800131a:	2a25      	cmp	r2, #37	@ 0x25
 800131c:	d1f9      	bne.n	8001312 <_vfiprintf_r+0x7a>
 800131e:	ebba 0b04 	subs.w	fp, sl, r4
 8001322:	d00b      	beq.n	800133c <_vfiprintf_r+0xa4>
 8001324:	465b      	mov	r3, fp
 8001326:	4622      	mov	r2, r4
 8001328:	4629      	mov	r1, r5
 800132a:	4630      	mov	r0, r6
 800132c:	f7ff ffa2 	bl	8001274 <__sfputs_r>
 8001330:	3001      	adds	r0, #1
 8001332:	f000 80a7 	beq.w	8001484 <_vfiprintf_r+0x1ec>
 8001336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001338:	445a      	add	r2, fp
 800133a:	9209      	str	r2, [sp, #36]	@ 0x24
 800133c:	f89a 3000 	ldrb.w	r3, [sl]
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 809f 	beq.w	8001484 <_vfiprintf_r+0x1ec>
 8001346:	2300      	movs	r3, #0
 8001348:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800134c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001350:	f10a 0a01 	add.w	sl, sl, #1
 8001354:	9304      	str	r3, [sp, #16]
 8001356:	9307      	str	r3, [sp, #28]
 8001358:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800135c:	931a      	str	r3, [sp, #104]	@ 0x68
 800135e:	4654      	mov	r4, sl
 8001360:	2205      	movs	r2, #5
 8001362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001366:	4853      	ldr	r0, [pc, #332]	@ (80014b4 <_vfiprintf_r+0x21c>)
 8001368:	f7fe ff52 	bl	8000210 <memchr>
 800136c:	9a04      	ldr	r2, [sp, #16]
 800136e:	b9d8      	cbnz	r0, 80013a8 <_vfiprintf_r+0x110>
 8001370:	06d1      	lsls	r1, r2, #27
 8001372:	bf44      	itt	mi
 8001374:	2320      	movmi	r3, #32
 8001376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800137a:	0713      	lsls	r3, r2, #28
 800137c:	bf44      	itt	mi
 800137e:	232b      	movmi	r3, #43	@ 0x2b
 8001380:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001384:	f89a 3000 	ldrb.w	r3, [sl]
 8001388:	2b2a      	cmp	r3, #42	@ 0x2a
 800138a:	d015      	beq.n	80013b8 <_vfiprintf_r+0x120>
 800138c:	9a07      	ldr	r2, [sp, #28]
 800138e:	4654      	mov	r4, sl
 8001390:	2000      	movs	r0, #0
 8001392:	f04f 0c0a 	mov.w	ip, #10
 8001396:	4621      	mov	r1, r4
 8001398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800139c:	3b30      	subs	r3, #48	@ 0x30
 800139e:	2b09      	cmp	r3, #9
 80013a0:	d94b      	bls.n	800143a <_vfiprintf_r+0x1a2>
 80013a2:	b1b0      	cbz	r0, 80013d2 <_vfiprintf_r+0x13a>
 80013a4:	9207      	str	r2, [sp, #28]
 80013a6:	e014      	b.n	80013d2 <_vfiprintf_r+0x13a>
 80013a8:	eba0 0308 	sub.w	r3, r0, r8
 80013ac:	fa09 f303 	lsl.w	r3, r9, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	9304      	str	r3, [sp, #16]
 80013b4:	46a2      	mov	sl, r4
 80013b6:	e7d2      	b.n	800135e <_vfiprintf_r+0xc6>
 80013b8:	9b03      	ldr	r3, [sp, #12]
 80013ba:	1d19      	adds	r1, r3, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	9103      	str	r1, [sp, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bfbb      	ittet	lt
 80013c4:	425b      	neglt	r3, r3
 80013c6:	f042 0202 	orrlt.w	r2, r2, #2
 80013ca:	9307      	strge	r3, [sp, #28]
 80013cc:	9307      	strlt	r3, [sp, #28]
 80013ce:	bfb8      	it	lt
 80013d0:	9204      	strlt	r2, [sp, #16]
 80013d2:	7823      	ldrb	r3, [r4, #0]
 80013d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80013d6:	d10a      	bne.n	80013ee <_vfiprintf_r+0x156>
 80013d8:	7863      	ldrb	r3, [r4, #1]
 80013da:	2b2a      	cmp	r3, #42	@ 0x2a
 80013dc:	d132      	bne.n	8001444 <_vfiprintf_r+0x1ac>
 80013de:	9b03      	ldr	r3, [sp, #12]
 80013e0:	1d1a      	adds	r2, r3, #4
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	9203      	str	r2, [sp, #12]
 80013e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80013ea:	3402      	adds	r4, #2
 80013ec:	9305      	str	r3, [sp, #20]
 80013ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80014c4 <_vfiprintf_r+0x22c>
 80013f2:	7821      	ldrb	r1, [r4, #0]
 80013f4:	2203      	movs	r2, #3
 80013f6:	4650      	mov	r0, sl
 80013f8:	f7fe ff0a 	bl	8000210 <memchr>
 80013fc:	b138      	cbz	r0, 800140e <_vfiprintf_r+0x176>
 80013fe:	9b04      	ldr	r3, [sp, #16]
 8001400:	eba0 000a 	sub.w	r0, r0, sl
 8001404:	2240      	movs	r2, #64	@ 0x40
 8001406:	4082      	lsls	r2, r0
 8001408:	4313      	orrs	r3, r2
 800140a:	3401      	adds	r4, #1
 800140c:	9304      	str	r3, [sp, #16]
 800140e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001412:	4829      	ldr	r0, [pc, #164]	@ (80014b8 <_vfiprintf_r+0x220>)
 8001414:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001418:	2206      	movs	r2, #6
 800141a:	f7fe fef9 	bl	8000210 <memchr>
 800141e:	2800      	cmp	r0, #0
 8001420:	d03f      	beq.n	80014a2 <_vfiprintf_r+0x20a>
 8001422:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <_vfiprintf_r+0x224>)
 8001424:	bb1b      	cbnz	r3, 800146e <_vfiprintf_r+0x1d6>
 8001426:	9b03      	ldr	r3, [sp, #12]
 8001428:	3307      	adds	r3, #7
 800142a:	f023 0307 	bic.w	r3, r3, #7
 800142e:	3308      	adds	r3, #8
 8001430:	9303      	str	r3, [sp, #12]
 8001432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001434:	443b      	add	r3, r7
 8001436:	9309      	str	r3, [sp, #36]	@ 0x24
 8001438:	e76a      	b.n	8001310 <_vfiprintf_r+0x78>
 800143a:	fb0c 3202 	mla	r2, ip, r2, r3
 800143e:	460c      	mov	r4, r1
 8001440:	2001      	movs	r0, #1
 8001442:	e7a8      	b.n	8001396 <_vfiprintf_r+0xfe>
 8001444:	2300      	movs	r3, #0
 8001446:	3401      	adds	r4, #1
 8001448:	9305      	str	r3, [sp, #20]
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 0c0a 	mov.w	ip, #10
 8001450:	4620      	mov	r0, r4
 8001452:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001456:	3a30      	subs	r2, #48	@ 0x30
 8001458:	2a09      	cmp	r2, #9
 800145a:	d903      	bls.n	8001464 <_vfiprintf_r+0x1cc>
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0c6      	beq.n	80013ee <_vfiprintf_r+0x156>
 8001460:	9105      	str	r1, [sp, #20]
 8001462:	e7c4      	b.n	80013ee <_vfiprintf_r+0x156>
 8001464:	fb0c 2101 	mla	r1, ip, r1, r2
 8001468:	4604      	mov	r4, r0
 800146a:	2301      	movs	r3, #1
 800146c:	e7f0      	b.n	8001450 <_vfiprintf_r+0x1b8>
 800146e:	ab03      	add	r3, sp, #12
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	462a      	mov	r2, r5
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <_vfiprintf_r+0x228>)
 8001476:	a904      	add	r1, sp, #16
 8001478:	4630      	mov	r0, r6
 800147a:	f3af 8000 	nop.w
 800147e:	4607      	mov	r7, r0
 8001480:	1c78      	adds	r0, r7, #1
 8001482:	d1d6      	bne.n	8001432 <_vfiprintf_r+0x19a>
 8001484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001486:	07d9      	lsls	r1, r3, #31
 8001488:	d405      	bmi.n	8001496 <_vfiprintf_r+0x1fe>
 800148a:	89ab      	ldrh	r3, [r5, #12]
 800148c:	059a      	lsls	r2, r3, #22
 800148e:	d402      	bmi.n	8001496 <_vfiprintf_r+0x1fe>
 8001490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001492:	f7ff fed7 	bl	8001244 <__retarget_lock_release_recursive>
 8001496:	89ab      	ldrh	r3, [r5, #12]
 8001498:	065b      	lsls	r3, r3, #25
 800149a:	f53f af1f 	bmi.w	80012dc <_vfiprintf_r+0x44>
 800149e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80014a0:	e71e      	b.n	80012e0 <_vfiprintf_r+0x48>
 80014a2:	ab03      	add	r3, sp, #12
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	462a      	mov	r2, r5
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <_vfiprintf_r+0x228>)
 80014aa:	a904      	add	r1, sp, #16
 80014ac:	4630      	mov	r0, r6
 80014ae:	f000 f91b 	bl	80016e8 <_printf_i>
 80014b2:	e7e4      	b.n	800147e <_vfiprintf_r+0x1e6>
 80014b4:	08001eb8 	.word	0x08001eb8
 80014b8:	08001ec2 	.word	0x08001ec2
 80014bc:	00000000 	.word	0x00000000
 80014c0:	08001275 	.word	0x08001275
 80014c4:	08001ebe 	.word	0x08001ebe

080014c8 <sbrk_aligned>:
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	4e0f      	ldr	r6, [pc, #60]	@ (8001508 <sbrk_aligned+0x40>)
 80014cc:	460c      	mov	r4, r1
 80014ce:	6831      	ldr	r1, [r6, #0]
 80014d0:	4605      	mov	r5, r0
 80014d2:	b911      	cbnz	r1, 80014da <sbrk_aligned+0x12>
 80014d4:	f000 fc4c 	bl	8001d70 <_sbrk_r>
 80014d8:	6030      	str	r0, [r6, #0]
 80014da:	4621      	mov	r1, r4
 80014dc:	4628      	mov	r0, r5
 80014de:	f000 fc47 	bl	8001d70 <_sbrk_r>
 80014e2:	1c43      	adds	r3, r0, #1
 80014e4:	d103      	bne.n	80014ee <sbrk_aligned+0x26>
 80014e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80014ea:	4620      	mov	r0, r4
 80014ec:	bd70      	pop	{r4, r5, r6, pc}
 80014ee:	1cc4      	adds	r4, r0, #3
 80014f0:	f024 0403 	bic.w	r4, r4, #3
 80014f4:	42a0      	cmp	r0, r4
 80014f6:	d0f8      	beq.n	80014ea <sbrk_aligned+0x22>
 80014f8:	1a21      	subs	r1, r4, r0
 80014fa:	4628      	mov	r0, r5
 80014fc:	f000 fc38 	bl	8001d70 <_sbrk_r>
 8001500:	3001      	adds	r0, #1
 8001502:	d1f2      	bne.n	80014ea <sbrk_aligned+0x22>
 8001504:	e7ef      	b.n	80014e6 <sbrk_aligned+0x1e>
 8001506:	bf00      	nop
 8001508:	200001f0 	.word	0x200001f0

0800150c <_malloc_r>:
 800150c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001510:	1ccd      	adds	r5, r1, #3
 8001512:	f025 0503 	bic.w	r5, r5, #3
 8001516:	3508      	adds	r5, #8
 8001518:	2d0c      	cmp	r5, #12
 800151a:	bf38      	it	cc
 800151c:	250c      	movcc	r5, #12
 800151e:	2d00      	cmp	r5, #0
 8001520:	4606      	mov	r6, r0
 8001522:	db01      	blt.n	8001528 <_malloc_r+0x1c>
 8001524:	42a9      	cmp	r1, r5
 8001526:	d904      	bls.n	8001532 <_malloc_r+0x26>
 8001528:	230c      	movs	r3, #12
 800152a:	6033      	str	r3, [r6, #0]
 800152c:	2000      	movs	r0, #0
 800152e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001532:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001608 <_malloc_r+0xfc>
 8001536:	f000 faa1 	bl	8001a7c <__malloc_lock>
 800153a:	f8d8 3000 	ldr.w	r3, [r8]
 800153e:	461c      	mov	r4, r3
 8001540:	bb44      	cbnz	r4, 8001594 <_malloc_r+0x88>
 8001542:	4629      	mov	r1, r5
 8001544:	4630      	mov	r0, r6
 8001546:	f7ff ffbf 	bl	80014c8 <sbrk_aligned>
 800154a:	1c43      	adds	r3, r0, #1
 800154c:	4604      	mov	r4, r0
 800154e:	d158      	bne.n	8001602 <_malloc_r+0xf6>
 8001550:	f8d8 4000 	ldr.w	r4, [r8]
 8001554:	4627      	mov	r7, r4
 8001556:	2f00      	cmp	r7, #0
 8001558:	d143      	bne.n	80015e2 <_malloc_r+0xd6>
 800155a:	2c00      	cmp	r4, #0
 800155c:	d04b      	beq.n	80015f6 <_malloc_r+0xea>
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	4639      	mov	r1, r7
 8001562:	4630      	mov	r0, r6
 8001564:	eb04 0903 	add.w	r9, r4, r3
 8001568:	f000 fc02 	bl	8001d70 <_sbrk_r>
 800156c:	4581      	cmp	r9, r0
 800156e:	d142      	bne.n	80015f6 <_malloc_r+0xea>
 8001570:	6821      	ldr	r1, [r4, #0]
 8001572:	1a6d      	subs	r5, r5, r1
 8001574:	4629      	mov	r1, r5
 8001576:	4630      	mov	r0, r6
 8001578:	f7ff ffa6 	bl	80014c8 <sbrk_aligned>
 800157c:	3001      	adds	r0, #1
 800157e:	d03a      	beq.n	80015f6 <_malloc_r+0xea>
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	442b      	add	r3, r5
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	f8d8 3000 	ldr.w	r3, [r8]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	bb62      	cbnz	r2, 80015e8 <_malloc_r+0xdc>
 800158e:	f8c8 7000 	str.w	r7, [r8]
 8001592:	e00f      	b.n	80015b4 <_malloc_r+0xa8>
 8001594:	6822      	ldr	r2, [r4, #0]
 8001596:	1b52      	subs	r2, r2, r5
 8001598:	d420      	bmi.n	80015dc <_malloc_r+0xd0>
 800159a:	2a0b      	cmp	r2, #11
 800159c:	d917      	bls.n	80015ce <_malloc_r+0xc2>
 800159e:	1961      	adds	r1, r4, r5
 80015a0:	42a3      	cmp	r3, r4
 80015a2:	6025      	str	r5, [r4, #0]
 80015a4:	bf18      	it	ne
 80015a6:	6059      	strne	r1, [r3, #4]
 80015a8:	6863      	ldr	r3, [r4, #4]
 80015aa:	bf08      	it	eq
 80015ac:	f8c8 1000 	streq.w	r1, [r8]
 80015b0:	5162      	str	r2, [r4, r5]
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	4630      	mov	r0, r6
 80015b6:	f000 fa67 	bl	8001a88 <__malloc_unlock>
 80015ba:	f104 000b 	add.w	r0, r4, #11
 80015be:	1d23      	adds	r3, r4, #4
 80015c0:	f020 0007 	bic.w	r0, r0, #7
 80015c4:	1ac2      	subs	r2, r0, r3
 80015c6:	bf1c      	itt	ne
 80015c8:	1a1b      	subne	r3, r3, r0
 80015ca:	50a3      	strne	r3, [r4, r2]
 80015cc:	e7af      	b.n	800152e <_malloc_r+0x22>
 80015ce:	6862      	ldr	r2, [r4, #4]
 80015d0:	42a3      	cmp	r3, r4
 80015d2:	bf0c      	ite	eq
 80015d4:	f8c8 2000 	streq.w	r2, [r8]
 80015d8:	605a      	strne	r2, [r3, #4]
 80015da:	e7eb      	b.n	80015b4 <_malloc_r+0xa8>
 80015dc:	4623      	mov	r3, r4
 80015de:	6864      	ldr	r4, [r4, #4]
 80015e0:	e7ae      	b.n	8001540 <_malloc_r+0x34>
 80015e2:	463c      	mov	r4, r7
 80015e4:	687f      	ldr	r7, [r7, #4]
 80015e6:	e7b6      	b.n	8001556 <_malloc_r+0x4a>
 80015e8:	461a      	mov	r2, r3
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	42a3      	cmp	r3, r4
 80015ee:	d1fb      	bne.n	80015e8 <_malloc_r+0xdc>
 80015f0:	2300      	movs	r3, #0
 80015f2:	6053      	str	r3, [r2, #4]
 80015f4:	e7de      	b.n	80015b4 <_malloc_r+0xa8>
 80015f6:	230c      	movs	r3, #12
 80015f8:	6033      	str	r3, [r6, #0]
 80015fa:	4630      	mov	r0, r6
 80015fc:	f000 fa44 	bl	8001a88 <__malloc_unlock>
 8001600:	e794      	b.n	800152c <_malloc_r+0x20>
 8001602:	6005      	str	r5, [r0, #0]
 8001604:	e7d6      	b.n	80015b4 <_malloc_r+0xa8>
 8001606:	bf00      	nop
 8001608:	200001f4 	.word	0x200001f4

0800160c <_printf_common>:
 800160c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001610:	4616      	mov	r6, r2
 8001612:	4698      	mov	r8, r3
 8001614:	688a      	ldr	r2, [r1, #8]
 8001616:	690b      	ldr	r3, [r1, #16]
 8001618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800161c:	4293      	cmp	r3, r2
 800161e:	bfb8      	it	lt
 8001620:	4613      	movlt	r3, r2
 8001622:	6033      	str	r3, [r6, #0]
 8001624:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001628:	4607      	mov	r7, r0
 800162a:	460c      	mov	r4, r1
 800162c:	b10a      	cbz	r2, 8001632 <_printf_common+0x26>
 800162e:	3301      	adds	r3, #1
 8001630:	6033      	str	r3, [r6, #0]
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	0699      	lsls	r1, r3, #26
 8001636:	bf42      	ittt	mi
 8001638:	6833      	ldrmi	r3, [r6, #0]
 800163a:	3302      	addmi	r3, #2
 800163c:	6033      	strmi	r3, [r6, #0]
 800163e:	6825      	ldr	r5, [r4, #0]
 8001640:	f015 0506 	ands.w	r5, r5, #6
 8001644:	d106      	bne.n	8001654 <_printf_common+0x48>
 8001646:	f104 0a19 	add.w	sl, r4, #25
 800164a:	68e3      	ldr	r3, [r4, #12]
 800164c:	6832      	ldr	r2, [r6, #0]
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	42ab      	cmp	r3, r5
 8001652:	dc26      	bgt.n	80016a2 <_printf_common+0x96>
 8001654:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001658:	6822      	ldr	r2, [r4, #0]
 800165a:	3b00      	subs	r3, #0
 800165c:	bf18      	it	ne
 800165e:	2301      	movne	r3, #1
 8001660:	0692      	lsls	r2, r2, #26
 8001662:	d42b      	bmi.n	80016bc <_printf_common+0xb0>
 8001664:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001668:	4641      	mov	r1, r8
 800166a:	4638      	mov	r0, r7
 800166c:	47c8      	blx	r9
 800166e:	3001      	adds	r0, #1
 8001670:	d01e      	beq.n	80016b0 <_printf_common+0xa4>
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	6922      	ldr	r2, [r4, #16]
 8001676:	f003 0306 	and.w	r3, r3, #6
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf02      	ittt	eq
 800167e:	68e5      	ldreq	r5, [r4, #12]
 8001680:	6833      	ldreq	r3, [r6, #0]
 8001682:	1aed      	subeq	r5, r5, r3
 8001684:	68a3      	ldr	r3, [r4, #8]
 8001686:	bf0c      	ite	eq
 8001688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800168c:	2500      	movne	r5, #0
 800168e:	4293      	cmp	r3, r2
 8001690:	bfc4      	itt	gt
 8001692:	1a9b      	subgt	r3, r3, r2
 8001694:	18ed      	addgt	r5, r5, r3
 8001696:	2600      	movs	r6, #0
 8001698:	341a      	adds	r4, #26
 800169a:	42b5      	cmp	r5, r6
 800169c:	d11a      	bne.n	80016d4 <_printf_common+0xc8>
 800169e:	2000      	movs	r0, #0
 80016a0:	e008      	b.n	80016b4 <_printf_common+0xa8>
 80016a2:	2301      	movs	r3, #1
 80016a4:	4652      	mov	r2, sl
 80016a6:	4641      	mov	r1, r8
 80016a8:	4638      	mov	r0, r7
 80016aa:	47c8      	blx	r9
 80016ac:	3001      	adds	r0, #1
 80016ae:	d103      	bne.n	80016b8 <_printf_common+0xac>
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016b8:	3501      	adds	r5, #1
 80016ba:	e7c6      	b.n	800164a <_printf_common+0x3e>
 80016bc:	18e1      	adds	r1, r4, r3
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	2030      	movs	r0, #48	@ 0x30
 80016c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80016c6:	4422      	add	r2, r4
 80016c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80016cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80016d0:	3302      	adds	r3, #2
 80016d2:	e7c7      	b.n	8001664 <_printf_common+0x58>
 80016d4:	2301      	movs	r3, #1
 80016d6:	4622      	mov	r2, r4
 80016d8:	4641      	mov	r1, r8
 80016da:	4638      	mov	r0, r7
 80016dc:	47c8      	blx	r9
 80016de:	3001      	adds	r0, #1
 80016e0:	d0e6      	beq.n	80016b0 <_printf_common+0xa4>
 80016e2:	3601      	adds	r6, #1
 80016e4:	e7d9      	b.n	800169a <_printf_common+0x8e>
	...

080016e8 <_printf_i>:
 80016e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016ec:	7e0f      	ldrb	r7, [r1, #24]
 80016ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80016f0:	2f78      	cmp	r7, #120	@ 0x78
 80016f2:	4691      	mov	r9, r2
 80016f4:	4680      	mov	r8, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	469a      	mov	sl, r3
 80016fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80016fe:	d807      	bhi.n	8001710 <_printf_i+0x28>
 8001700:	2f62      	cmp	r7, #98	@ 0x62
 8001702:	d80a      	bhi.n	800171a <_printf_i+0x32>
 8001704:	2f00      	cmp	r7, #0
 8001706:	f000 80d1 	beq.w	80018ac <_printf_i+0x1c4>
 800170a:	2f58      	cmp	r7, #88	@ 0x58
 800170c:	f000 80b8 	beq.w	8001880 <_printf_i+0x198>
 8001710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001714:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001718:	e03a      	b.n	8001790 <_printf_i+0xa8>
 800171a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800171e:	2b15      	cmp	r3, #21
 8001720:	d8f6      	bhi.n	8001710 <_printf_i+0x28>
 8001722:	a101      	add	r1, pc, #4	@ (adr r1, 8001728 <_printf_i+0x40>)
 8001724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001728:	08001781 	.word	0x08001781
 800172c:	08001795 	.word	0x08001795
 8001730:	08001711 	.word	0x08001711
 8001734:	08001711 	.word	0x08001711
 8001738:	08001711 	.word	0x08001711
 800173c:	08001711 	.word	0x08001711
 8001740:	08001795 	.word	0x08001795
 8001744:	08001711 	.word	0x08001711
 8001748:	08001711 	.word	0x08001711
 800174c:	08001711 	.word	0x08001711
 8001750:	08001711 	.word	0x08001711
 8001754:	08001893 	.word	0x08001893
 8001758:	080017bf 	.word	0x080017bf
 800175c:	0800184d 	.word	0x0800184d
 8001760:	08001711 	.word	0x08001711
 8001764:	08001711 	.word	0x08001711
 8001768:	080018b5 	.word	0x080018b5
 800176c:	08001711 	.word	0x08001711
 8001770:	080017bf 	.word	0x080017bf
 8001774:	08001711 	.word	0x08001711
 8001778:	08001711 	.word	0x08001711
 800177c:	08001855 	.word	0x08001855
 8001780:	6833      	ldr	r3, [r6, #0]
 8001782:	1d1a      	adds	r2, r3, #4
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6032      	str	r2, [r6, #0]
 8001788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800178c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001790:	2301      	movs	r3, #1
 8001792:	e09c      	b.n	80018ce <_printf_i+0x1e6>
 8001794:	6833      	ldr	r3, [r6, #0]
 8001796:	6820      	ldr	r0, [r4, #0]
 8001798:	1d19      	adds	r1, r3, #4
 800179a:	6031      	str	r1, [r6, #0]
 800179c:	0606      	lsls	r6, r0, #24
 800179e:	d501      	bpl.n	80017a4 <_printf_i+0xbc>
 80017a0:	681d      	ldr	r5, [r3, #0]
 80017a2:	e003      	b.n	80017ac <_printf_i+0xc4>
 80017a4:	0645      	lsls	r5, r0, #25
 80017a6:	d5fb      	bpl.n	80017a0 <_printf_i+0xb8>
 80017a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80017ac:	2d00      	cmp	r5, #0
 80017ae:	da03      	bge.n	80017b8 <_printf_i+0xd0>
 80017b0:	232d      	movs	r3, #45	@ 0x2d
 80017b2:	426d      	negs	r5, r5
 80017b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017b8:	4858      	ldr	r0, [pc, #352]	@ (800191c <_printf_i+0x234>)
 80017ba:	230a      	movs	r3, #10
 80017bc:	e011      	b.n	80017e2 <_printf_i+0xfa>
 80017be:	6821      	ldr	r1, [r4, #0]
 80017c0:	6833      	ldr	r3, [r6, #0]
 80017c2:	0608      	lsls	r0, r1, #24
 80017c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80017c8:	d402      	bmi.n	80017d0 <_printf_i+0xe8>
 80017ca:	0649      	lsls	r1, r1, #25
 80017cc:	bf48      	it	mi
 80017ce:	b2ad      	uxthmi	r5, r5
 80017d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80017d2:	4852      	ldr	r0, [pc, #328]	@ (800191c <_printf_i+0x234>)
 80017d4:	6033      	str	r3, [r6, #0]
 80017d6:	bf14      	ite	ne
 80017d8:	230a      	movne	r3, #10
 80017da:	2308      	moveq	r3, #8
 80017dc:	2100      	movs	r1, #0
 80017de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80017e2:	6866      	ldr	r6, [r4, #4]
 80017e4:	60a6      	str	r6, [r4, #8]
 80017e6:	2e00      	cmp	r6, #0
 80017e8:	db05      	blt.n	80017f6 <_printf_i+0x10e>
 80017ea:	6821      	ldr	r1, [r4, #0]
 80017ec:	432e      	orrs	r6, r5
 80017ee:	f021 0104 	bic.w	r1, r1, #4
 80017f2:	6021      	str	r1, [r4, #0]
 80017f4:	d04b      	beq.n	800188e <_printf_i+0x1a6>
 80017f6:	4616      	mov	r6, r2
 80017f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80017fc:	fb03 5711 	mls	r7, r3, r1, r5
 8001800:	5dc7      	ldrb	r7, [r0, r7]
 8001802:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001806:	462f      	mov	r7, r5
 8001808:	42bb      	cmp	r3, r7
 800180a:	460d      	mov	r5, r1
 800180c:	d9f4      	bls.n	80017f8 <_printf_i+0x110>
 800180e:	2b08      	cmp	r3, #8
 8001810:	d10b      	bne.n	800182a <_printf_i+0x142>
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	07df      	lsls	r7, r3, #31
 8001816:	d508      	bpl.n	800182a <_printf_i+0x142>
 8001818:	6923      	ldr	r3, [r4, #16]
 800181a:	6861      	ldr	r1, [r4, #4]
 800181c:	4299      	cmp	r1, r3
 800181e:	bfde      	ittt	le
 8001820:	2330      	movle	r3, #48	@ 0x30
 8001822:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001826:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800182a:	1b92      	subs	r2, r2, r6
 800182c:	6122      	str	r2, [r4, #16]
 800182e:	f8cd a000 	str.w	sl, [sp]
 8001832:	464b      	mov	r3, r9
 8001834:	aa03      	add	r2, sp, #12
 8001836:	4621      	mov	r1, r4
 8001838:	4640      	mov	r0, r8
 800183a:	f7ff fee7 	bl	800160c <_printf_common>
 800183e:	3001      	adds	r0, #1
 8001840:	d14a      	bne.n	80018d8 <_printf_i+0x1f0>
 8001842:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001846:	b004      	add	sp, #16
 8001848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	f043 0320 	orr.w	r3, r3, #32
 8001852:	6023      	str	r3, [r4, #0]
 8001854:	4832      	ldr	r0, [pc, #200]	@ (8001920 <_printf_i+0x238>)
 8001856:	2778      	movs	r7, #120	@ 0x78
 8001858:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	6831      	ldr	r1, [r6, #0]
 8001860:	061f      	lsls	r7, r3, #24
 8001862:	f851 5b04 	ldr.w	r5, [r1], #4
 8001866:	d402      	bmi.n	800186e <_printf_i+0x186>
 8001868:	065f      	lsls	r7, r3, #25
 800186a:	bf48      	it	mi
 800186c:	b2ad      	uxthmi	r5, r5
 800186e:	6031      	str	r1, [r6, #0]
 8001870:	07d9      	lsls	r1, r3, #31
 8001872:	bf44      	itt	mi
 8001874:	f043 0320 	orrmi.w	r3, r3, #32
 8001878:	6023      	strmi	r3, [r4, #0]
 800187a:	b11d      	cbz	r5, 8001884 <_printf_i+0x19c>
 800187c:	2310      	movs	r3, #16
 800187e:	e7ad      	b.n	80017dc <_printf_i+0xf4>
 8001880:	4826      	ldr	r0, [pc, #152]	@ (800191c <_printf_i+0x234>)
 8001882:	e7e9      	b.n	8001858 <_printf_i+0x170>
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	f023 0320 	bic.w	r3, r3, #32
 800188a:	6023      	str	r3, [r4, #0]
 800188c:	e7f6      	b.n	800187c <_printf_i+0x194>
 800188e:	4616      	mov	r6, r2
 8001890:	e7bd      	b.n	800180e <_printf_i+0x126>
 8001892:	6833      	ldr	r3, [r6, #0]
 8001894:	6825      	ldr	r5, [r4, #0]
 8001896:	6961      	ldr	r1, [r4, #20]
 8001898:	1d18      	adds	r0, r3, #4
 800189a:	6030      	str	r0, [r6, #0]
 800189c:	062e      	lsls	r6, r5, #24
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	d501      	bpl.n	80018a6 <_printf_i+0x1be>
 80018a2:	6019      	str	r1, [r3, #0]
 80018a4:	e002      	b.n	80018ac <_printf_i+0x1c4>
 80018a6:	0668      	lsls	r0, r5, #25
 80018a8:	d5fb      	bpl.n	80018a2 <_printf_i+0x1ba>
 80018aa:	8019      	strh	r1, [r3, #0]
 80018ac:	2300      	movs	r3, #0
 80018ae:	6123      	str	r3, [r4, #16]
 80018b0:	4616      	mov	r6, r2
 80018b2:	e7bc      	b.n	800182e <_printf_i+0x146>
 80018b4:	6833      	ldr	r3, [r6, #0]
 80018b6:	1d1a      	adds	r2, r3, #4
 80018b8:	6032      	str	r2, [r6, #0]
 80018ba:	681e      	ldr	r6, [r3, #0]
 80018bc:	6862      	ldr	r2, [r4, #4]
 80018be:	2100      	movs	r1, #0
 80018c0:	4630      	mov	r0, r6
 80018c2:	f7fe fca5 	bl	8000210 <memchr>
 80018c6:	b108      	cbz	r0, 80018cc <_printf_i+0x1e4>
 80018c8:	1b80      	subs	r0, r0, r6
 80018ca:	6060      	str	r0, [r4, #4]
 80018cc:	6863      	ldr	r3, [r4, #4]
 80018ce:	6123      	str	r3, [r4, #16]
 80018d0:	2300      	movs	r3, #0
 80018d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80018d6:	e7aa      	b.n	800182e <_printf_i+0x146>
 80018d8:	6923      	ldr	r3, [r4, #16]
 80018da:	4632      	mov	r2, r6
 80018dc:	4649      	mov	r1, r9
 80018de:	4640      	mov	r0, r8
 80018e0:	47d0      	blx	sl
 80018e2:	3001      	adds	r0, #1
 80018e4:	d0ad      	beq.n	8001842 <_printf_i+0x15a>
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	079b      	lsls	r3, r3, #30
 80018ea:	d413      	bmi.n	8001914 <_printf_i+0x22c>
 80018ec:	68e0      	ldr	r0, [r4, #12]
 80018ee:	9b03      	ldr	r3, [sp, #12]
 80018f0:	4298      	cmp	r0, r3
 80018f2:	bfb8      	it	lt
 80018f4:	4618      	movlt	r0, r3
 80018f6:	e7a6      	b.n	8001846 <_printf_i+0x15e>
 80018f8:	2301      	movs	r3, #1
 80018fa:	4632      	mov	r2, r6
 80018fc:	4649      	mov	r1, r9
 80018fe:	4640      	mov	r0, r8
 8001900:	47d0      	blx	sl
 8001902:	3001      	adds	r0, #1
 8001904:	d09d      	beq.n	8001842 <_printf_i+0x15a>
 8001906:	3501      	adds	r5, #1
 8001908:	68e3      	ldr	r3, [r4, #12]
 800190a:	9903      	ldr	r1, [sp, #12]
 800190c:	1a5b      	subs	r3, r3, r1
 800190e:	42ab      	cmp	r3, r5
 8001910:	dcf2      	bgt.n	80018f8 <_printf_i+0x210>
 8001912:	e7eb      	b.n	80018ec <_printf_i+0x204>
 8001914:	2500      	movs	r5, #0
 8001916:	f104 0619 	add.w	r6, r4, #25
 800191a:	e7f5      	b.n	8001908 <_printf_i+0x220>
 800191c:	08001ec9 	.word	0x08001ec9
 8001920:	08001eda 	.word	0x08001eda

08001924 <__sflush_r>:
 8001924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800192c:	0716      	lsls	r6, r2, #28
 800192e:	4605      	mov	r5, r0
 8001930:	460c      	mov	r4, r1
 8001932:	d454      	bmi.n	80019de <__sflush_r+0xba>
 8001934:	684b      	ldr	r3, [r1, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	dc02      	bgt.n	8001940 <__sflush_r+0x1c>
 800193a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800193c:	2b00      	cmp	r3, #0
 800193e:	dd48      	ble.n	80019d2 <__sflush_r+0xae>
 8001940:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001942:	2e00      	cmp	r6, #0
 8001944:	d045      	beq.n	80019d2 <__sflush_r+0xae>
 8001946:	2300      	movs	r3, #0
 8001948:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800194c:	682f      	ldr	r7, [r5, #0]
 800194e:	6a21      	ldr	r1, [r4, #32]
 8001950:	602b      	str	r3, [r5, #0]
 8001952:	d030      	beq.n	80019b6 <__sflush_r+0x92>
 8001954:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001956:	89a3      	ldrh	r3, [r4, #12]
 8001958:	0759      	lsls	r1, r3, #29
 800195a:	d505      	bpl.n	8001968 <__sflush_r+0x44>
 800195c:	6863      	ldr	r3, [r4, #4]
 800195e:	1ad2      	subs	r2, r2, r3
 8001960:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001962:	b10b      	cbz	r3, 8001968 <__sflush_r+0x44>
 8001964:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001966:	1ad2      	subs	r2, r2, r3
 8001968:	2300      	movs	r3, #0
 800196a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800196c:	6a21      	ldr	r1, [r4, #32]
 800196e:	4628      	mov	r0, r5
 8001970:	47b0      	blx	r6
 8001972:	1c43      	adds	r3, r0, #1
 8001974:	89a3      	ldrh	r3, [r4, #12]
 8001976:	d106      	bne.n	8001986 <__sflush_r+0x62>
 8001978:	6829      	ldr	r1, [r5, #0]
 800197a:	291d      	cmp	r1, #29
 800197c:	d82b      	bhi.n	80019d6 <__sflush_r+0xb2>
 800197e:	4a2a      	ldr	r2, [pc, #168]	@ (8001a28 <__sflush_r+0x104>)
 8001980:	40ca      	lsrs	r2, r1
 8001982:	07d6      	lsls	r6, r2, #31
 8001984:	d527      	bpl.n	80019d6 <__sflush_r+0xb2>
 8001986:	2200      	movs	r2, #0
 8001988:	6062      	str	r2, [r4, #4]
 800198a:	04d9      	lsls	r1, r3, #19
 800198c:	6922      	ldr	r2, [r4, #16]
 800198e:	6022      	str	r2, [r4, #0]
 8001990:	d504      	bpl.n	800199c <__sflush_r+0x78>
 8001992:	1c42      	adds	r2, r0, #1
 8001994:	d101      	bne.n	800199a <__sflush_r+0x76>
 8001996:	682b      	ldr	r3, [r5, #0]
 8001998:	b903      	cbnz	r3, 800199c <__sflush_r+0x78>
 800199a:	6560      	str	r0, [r4, #84]	@ 0x54
 800199c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800199e:	602f      	str	r7, [r5, #0]
 80019a0:	b1b9      	cbz	r1, 80019d2 <__sflush_r+0xae>
 80019a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80019a6:	4299      	cmp	r1, r3
 80019a8:	d002      	beq.n	80019b0 <__sflush_r+0x8c>
 80019aa:	4628      	mov	r0, r5
 80019ac:	f000 fa24 	bl	8001df8 <_free_r>
 80019b0:	2300      	movs	r3, #0
 80019b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80019b4:	e00d      	b.n	80019d2 <__sflush_r+0xae>
 80019b6:	2301      	movs	r3, #1
 80019b8:	4628      	mov	r0, r5
 80019ba:	47b0      	blx	r6
 80019bc:	4602      	mov	r2, r0
 80019be:	1c50      	adds	r0, r2, #1
 80019c0:	d1c9      	bne.n	8001956 <__sflush_r+0x32>
 80019c2:	682b      	ldr	r3, [r5, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0c6      	beq.n	8001956 <__sflush_r+0x32>
 80019c8:	2b1d      	cmp	r3, #29
 80019ca:	d001      	beq.n	80019d0 <__sflush_r+0xac>
 80019cc:	2b16      	cmp	r3, #22
 80019ce:	d11e      	bne.n	8001a0e <__sflush_r+0xea>
 80019d0:	602f      	str	r7, [r5, #0]
 80019d2:	2000      	movs	r0, #0
 80019d4:	e022      	b.n	8001a1c <__sflush_r+0xf8>
 80019d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019da:	b21b      	sxth	r3, r3
 80019dc:	e01b      	b.n	8001a16 <__sflush_r+0xf2>
 80019de:	690f      	ldr	r7, [r1, #16]
 80019e0:	2f00      	cmp	r7, #0
 80019e2:	d0f6      	beq.n	80019d2 <__sflush_r+0xae>
 80019e4:	0793      	lsls	r3, r2, #30
 80019e6:	680e      	ldr	r6, [r1, #0]
 80019e8:	bf08      	it	eq
 80019ea:	694b      	ldreq	r3, [r1, #20]
 80019ec:	600f      	str	r7, [r1, #0]
 80019ee:	bf18      	it	ne
 80019f0:	2300      	movne	r3, #0
 80019f2:	eba6 0807 	sub.w	r8, r6, r7
 80019f6:	608b      	str	r3, [r1, #8]
 80019f8:	f1b8 0f00 	cmp.w	r8, #0
 80019fc:	dde9      	ble.n	80019d2 <__sflush_r+0xae>
 80019fe:	6a21      	ldr	r1, [r4, #32]
 8001a00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001a02:	4643      	mov	r3, r8
 8001a04:	463a      	mov	r2, r7
 8001a06:	4628      	mov	r0, r5
 8001a08:	47b0      	blx	r6
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	dc08      	bgt.n	8001a20 <__sflush_r+0xfc>
 8001a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a16:	81a3      	strh	r3, [r4, #12]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a20:	4407      	add	r7, r0
 8001a22:	eba8 0800 	sub.w	r8, r8, r0
 8001a26:	e7e7      	b.n	80019f8 <__sflush_r+0xd4>
 8001a28:	20400001 	.word	0x20400001

08001a2c <_fflush_r>:
 8001a2c:	b538      	push	{r3, r4, r5, lr}
 8001a2e:	690b      	ldr	r3, [r1, #16]
 8001a30:	4605      	mov	r5, r0
 8001a32:	460c      	mov	r4, r1
 8001a34:	b913      	cbnz	r3, 8001a3c <_fflush_r+0x10>
 8001a36:	2500      	movs	r5, #0
 8001a38:	4628      	mov	r0, r5
 8001a3a:	bd38      	pop	{r3, r4, r5, pc}
 8001a3c:	b118      	cbz	r0, 8001a46 <_fflush_r+0x1a>
 8001a3e:	6a03      	ldr	r3, [r0, #32]
 8001a40:	b90b      	cbnz	r3, 8001a46 <_fflush_r+0x1a>
 8001a42:	f7ff fb83 	bl	800114c <__sinit>
 8001a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f3      	beq.n	8001a36 <_fflush_r+0xa>
 8001a4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001a50:	07d0      	lsls	r0, r2, #31
 8001a52:	d404      	bmi.n	8001a5e <_fflush_r+0x32>
 8001a54:	0599      	lsls	r1, r3, #22
 8001a56:	d402      	bmi.n	8001a5e <_fflush_r+0x32>
 8001a58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a5a:	f7ff fbf2 	bl	8001242 <__retarget_lock_acquire_recursive>
 8001a5e:	4628      	mov	r0, r5
 8001a60:	4621      	mov	r1, r4
 8001a62:	f7ff ff5f 	bl	8001924 <__sflush_r>
 8001a66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001a68:	07da      	lsls	r2, r3, #31
 8001a6a:	4605      	mov	r5, r0
 8001a6c:	d4e4      	bmi.n	8001a38 <_fflush_r+0xc>
 8001a6e:	89a3      	ldrh	r3, [r4, #12]
 8001a70:	059b      	lsls	r3, r3, #22
 8001a72:	d4e1      	bmi.n	8001a38 <_fflush_r+0xc>
 8001a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a76:	f7ff fbe5 	bl	8001244 <__retarget_lock_release_recursive>
 8001a7a:	e7dd      	b.n	8001a38 <_fflush_r+0xc>

08001a7c <__malloc_lock>:
 8001a7c:	4801      	ldr	r0, [pc, #4]	@ (8001a84 <__malloc_lock+0x8>)
 8001a7e:	f7ff bbe0 	b.w	8001242 <__retarget_lock_acquire_recursive>
 8001a82:	bf00      	nop
 8001a84:	200001ec 	.word	0x200001ec

08001a88 <__malloc_unlock>:
 8001a88:	4801      	ldr	r0, [pc, #4]	@ (8001a90 <__malloc_unlock+0x8>)
 8001a8a:	f7ff bbdb 	b.w	8001244 <__retarget_lock_release_recursive>
 8001a8e:	bf00      	nop
 8001a90:	200001ec 	.word	0x200001ec

08001a94 <__sread>:
 8001a94:	b510      	push	{r4, lr}
 8001a96:	460c      	mov	r4, r1
 8001a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a9c:	f000 f956 	bl	8001d4c <_read_r>
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	bfab      	itete	ge
 8001aa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8001aa8:	181b      	addge	r3, r3, r0
 8001aaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001aae:	bfac      	ite	ge
 8001ab0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001ab2:	81a3      	strhlt	r3, [r4, #12]
 8001ab4:	bd10      	pop	{r4, pc}

08001ab6 <__swrite>:
 8001ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aba:	461f      	mov	r7, r3
 8001abc:	898b      	ldrh	r3, [r1, #12]
 8001abe:	05db      	lsls	r3, r3, #23
 8001ac0:	4605      	mov	r5, r0
 8001ac2:	460c      	mov	r4, r1
 8001ac4:	4616      	mov	r6, r2
 8001ac6:	d505      	bpl.n	8001ad4 <__swrite+0x1e>
 8001ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001acc:	2302      	movs	r3, #2
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f000 f92a 	bl	8001d28 <_lseek_r>
 8001ad4:	89a3      	ldrh	r3, [r4, #12]
 8001ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ada:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ade:	81a3      	strh	r3, [r4, #12]
 8001ae0:	4632      	mov	r2, r6
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001aea:	f000 b951 	b.w	8001d90 <_write_r>

08001aee <__sseek>:
 8001aee:	b510      	push	{r4, lr}
 8001af0:	460c      	mov	r4, r1
 8001af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001af6:	f000 f917 	bl	8001d28 <_lseek_r>
 8001afa:	1c43      	adds	r3, r0, #1
 8001afc:	89a3      	ldrh	r3, [r4, #12]
 8001afe:	bf15      	itete	ne
 8001b00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001b02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001b06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001b0a:	81a3      	strheq	r3, [r4, #12]
 8001b0c:	bf18      	it	ne
 8001b0e:	81a3      	strhne	r3, [r4, #12]
 8001b10:	bd10      	pop	{r4, pc}

08001b12 <__sclose>:
 8001b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b16:	f000 b94d 	b.w	8001db4 <_close_r>

08001b1a <__swbuf_r>:
 8001b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1c:	460e      	mov	r6, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	4605      	mov	r5, r0
 8001b22:	b118      	cbz	r0, 8001b2c <__swbuf_r+0x12>
 8001b24:	6a03      	ldr	r3, [r0, #32]
 8001b26:	b90b      	cbnz	r3, 8001b2c <__swbuf_r+0x12>
 8001b28:	f7ff fb10 	bl	800114c <__sinit>
 8001b2c:	69a3      	ldr	r3, [r4, #24]
 8001b2e:	60a3      	str	r3, [r4, #8]
 8001b30:	89a3      	ldrh	r3, [r4, #12]
 8001b32:	071a      	lsls	r2, r3, #28
 8001b34:	d501      	bpl.n	8001b3a <__swbuf_r+0x20>
 8001b36:	6923      	ldr	r3, [r4, #16]
 8001b38:	b943      	cbnz	r3, 8001b4c <__swbuf_r+0x32>
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	f000 f82b 	bl	8001b98 <__swsetup_r>
 8001b42:	b118      	cbz	r0, 8001b4c <__swbuf_r+0x32>
 8001b44:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001b48:	4638      	mov	r0, r7
 8001b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	6922      	ldr	r2, [r4, #16]
 8001b50:	1a98      	subs	r0, r3, r2
 8001b52:	6963      	ldr	r3, [r4, #20]
 8001b54:	b2f6      	uxtb	r6, r6
 8001b56:	4283      	cmp	r3, r0
 8001b58:	4637      	mov	r7, r6
 8001b5a:	dc05      	bgt.n	8001b68 <__swbuf_r+0x4e>
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	4628      	mov	r0, r5
 8001b60:	f7ff ff64 	bl	8001a2c <_fflush_r>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d1ed      	bne.n	8001b44 <__swbuf_r+0x2a>
 8001b68:	68a3      	ldr	r3, [r4, #8]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	60a3      	str	r3, [r4, #8]
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	6022      	str	r2, [r4, #0]
 8001b74:	701e      	strb	r6, [r3, #0]
 8001b76:	6962      	ldr	r2, [r4, #20]
 8001b78:	1c43      	adds	r3, r0, #1
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d004      	beq.n	8001b88 <__swbuf_r+0x6e>
 8001b7e:	89a3      	ldrh	r3, [r4, #12]
 8001b80:	07db      	lsls	r3, r3, #31
 8001b82:	d5e1      	bpl.n	8001b48 <__swbuf_r+0x2e>
 8001b84:	2e0a      	cmp	r6, #10
 8001b86:	d1df      	bne.n	8001b48 <__swbuf_r+0x2e>
 8001b88:	4621      	mov	r1, r4
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f7ff ff4e 	bl	8001a2c <_fflush_r>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d0d9      	beq.n	8001b48 <__swbuf_r+0x2e>
 8001b94:	e7d6      	b.n	8001b44 <__swbuf_r+0x2a>
	...

08001b98 <__swsetup_r>:
 8001b98:	b538      	push	{r3, r4, r5, lr}
 8001b9a:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <__swsetup_r+0xa8>)
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	460c      	mov	r4, r1
 8001ba2:	b118      	cbz	r0, 8001bac <__swsetup_r+0x14>
 8001ba4:	6a03      	ldr	r3, [r0, #32]
 8001ba6:	b90b      	cbnz	r3, 8001bac <__swsetup_r+0x14>
 8001ba8:	f7ff fad0 	bl	800114c <__sinit>
 8001bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bb0:	0719      	lsls	r1, r3, #28
 8001bb2:	d422      	bmi.n	8001bfa <__swsetup_r+0x62>
 8001bb4:	06da      	lsls	r2, r3, #27
 8001bb6:	d407      	bmi.n	8001bc8 <__swsetup_r+0x30>
 8001bb8:	2209      	movs	r2, #9
 8001bba:	602a      	str	r2, [r5, #0]
 8001bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bc0:	81a3      	strh	r3, [r4, #12]
 8001bc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bc6:	e033      	b.n	8001c30 <__swsetup_r+0x98>
 8001bc8:	0758      	lsls	r0, r3, #29
 8001bca:	d512      	bpl.n	8001bf2 <__swsetup_r+0x5a>
 8001bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001bce:	b141      	cbz	r1, 8001be2 <__swsetup_r+0x4a>
 8001bd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001bd4:	4299      	cmp	r1, r3
 8001bd6:	d002      	beq.n	8001bde <__swsetup_r+0x46>
 8001bd8:	4628      	mov	r0, r5
 8001bda:	f000 f90d 	bl	8001df8 <_free_r>
 8001bde:	2300      	movs	r3, #0
 8001be0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001be2:	89a3      	ldrh	r3, [r4, #12]
 8001be4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001be8:	81a3      	strh	r3, [r4, #12]
 8001bea:	2300      	movs	r3, #0
 8001bec:	6063      	str	r3, [r4, #4]
 8001bee:	6923      	ldr	r3, [r4, #16]
 8001bf0:	6023      	str	r3, [r4, #0]
 8001bf2:	89a3      	ldrh	r3, [r4, #12]
 8001bf4:	f043 0308 	orr.w	r3, r3, #8
 8001bf8:	81a3      	strh	r3, [r4, #12]
 8001bfa:	6923      	ldr	r3, [r4, #16]
 8001bfc:	b94b      	cbnz	r3, 8001c12 <__swsetup_r+0x7a>
 8001bfe:	89a3      	ldrh	r3, [r4, #12]
 8001c00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c08:	d003      	beq.n	8001c12 <__swsetup_r+0x7a>
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	4628      	mov	r0, r5
 8001c0e:	f000 f83f 	bl	8001c90 <__smakebuf_r>
 8001c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c16:	f013 0201 	ands.w	r2, r3, #1
 8001c1a:	d00a      	beq.n	8001c32 <__swsetup_r+0x9a>
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60a2      	str	r2, [r4, #8]
 8001c20:	6962      	ldr	r2, [r4, #20]
 8001c22:	4252      	negs	r2, r2
 8001c24:	61a2      	str	r2, [r4, #24]
 8001c26:	6922      	ldr	r2, [r4, #16]
 8001c28:	b942      	cbnz	r2, 8001c3c <__swsetup_r+0xa4>
 8001c2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001c2e:	d1c5      	bne.n	8001bbc <__swsetup_r+0x24>
 8001c30:	bd38      	pop	{r3, r4, r5, pc}
 8001c32:	0799      	lsls	r1, r3, #30
 8001c34:	bf58      	it	pl
 8001c36:	6962      	ldrpl	r2, [r4, #20]
 8001c38:	60a2      	str	r2, [r4, #8]
 8001c3a:	e7f4      	b.n	8001c26 <__swsetup_r+0x8e>
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	e7f7      	b.n	8001c30 <__swsetup_r+0x98>
 8001c40:	2000000c 	.word	0x2000000c

08001c44 <__swhatbuf_r>:
 8001c44:	b570      	push	{r4, r5, r6, lr}
 8001c46:	460c      	mov	r4, r1
 8001c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c4c:	2900      	cmp	r1, #0
 8001c4e:	b096      	sub	sp, #88	@ 0x58
 8001c50:	4615      	mov	r5, r2
 8001c52:	461e      	mov	r6, r3
 8001c54:	da0d      	bge.n	8001c72 <__swhatbuf_r+0x2e>
 8001c56:	89a3      	ldrh	r3, [r4, #12]
 8001c58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c5c:	f04f 0100 	mov.w	r1, #0
 8001c60:	bf14      	ite	ne
 8001c62:	2340      	movne	r3, #64	@ 0x40
 8001c64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c68:	2000      	movs	r0, #0
 8001c6a:	6031      	str	r1, [r6, #0]
 8001c6c:	602b      	str	r3, [r5, #0]
 8001c6e:	b016      	add	sp, #88	@ 0x58
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
 8001c72:	466a      	mov	r2, sp
 8001c74:	f000 f8ae 	bl	8001dd4 <_fstat_r>
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	dbec      	blt.n	8001c56 <__swhatbuf_r+0x12>
 8001c7c:	9901      	ldr	r1, [sp, #4]
 8001c7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c86:	4259      	negs	r1, r3
 8001c88:	4159      	adcs	r1, r3
 8001c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c8e:	e7eb      	b.n	8001c68 <__swhatbuf_r+0x24>

08001c90 <__smakebuf_r>:
 8001c90:	898b      	ldrh	r3, [r1, #12]
 8001c92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c94:	079d      	lsls	r5, r3, #30
 8001c96:	4606      	mov	r6, r0
 8001c98:	460c      	mov	r4, r1
 8001c9a:	d507      	bpl.n	8001cac <__smakebuf_r+0x1c>
 8001c9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	6123      	str	r3, [r4, #16]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	6163      	str	r3, [r4, #20]
 8001ca8:	b003      	add	sp, #12
 8001caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cac:	ab01      	add	r3, sp, #4
 8001cae:	466a      	mov	r2, sp
 8001cb0:	f7ff ffc8 	bl	8001c44 <__swhatbuf_r>
 8001cb4:	9f00      	ldr	r7, [sp, #0]
 8001cb6:	4605      	mov	r5, r0
 8001cb8:	4639      	mov	r1, r7
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f7ff fc26 	bl	800150c <_malloc_r>
 8001cc0:	b948      	cbnz	r0, 8001cd6 <__smakebuf_r+0x46>
 8001cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cc6:	059a      	lsls	r2, r3, #22
 8001cc8:	d4ee      	bmi.n	8001ca8 <__smakebuf_r+0x18>
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	81a3      	strh	r3, [r4, #12]
 8001cd4:	e7e2      	b.n	8001c9c <__smakebuf_r+0xc>
 8001cd6:	89a3      	ldrh	r3, [r4, #12]
 8001cd8:	6020      	str	r0, [r4, #0]
 8001cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cde:	81a3      	strh	r3, [r4, #12]
 8001ce0:	9b01      	ldr	r3, [sp, #4]
 8001ce2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001ce6:	b15b      	cbz	r3, 8001d00 <__smakebuf_r+0x70>
 8001ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cec:	4630      	mov	r0, r6
 8001cee:	f000 f80b 	bl	8001d08 <_isatty_r>
 8001cf2:	b128      	cbz	r0, 8001d00 <__smakebuf_r+0x70>
 8001cf4:	89a3      	ldrh	r3, [r4, #12]
 8001cf6:	f023 0303 	bic.w	r3, r3, #3
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	81a3      	strh	r3, [r4, #12]
 8001d00:	89a3      	ldrh	r3, [r4, #12]
 8001d02:	431d      	orrs	r5, r3
 8001d04:	81a5      	strh	r5, [r4, #12]
 8001d06:	e7cf      	b.n	8001ca8 <__smakebuf_r+0x18>

08001d08 <_isatty_r>:
 8001d08:	b538      	push	{r3, r4, r5, lr}
 8001d0a:	4d06      	ldr	r5, [pc, #24]	@ (8001d24 <_isatty_r+0x1c>)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	4604      	mov	r4, r0
 8001d10:	4608      	mov	r0, r1
 8001d12:	602b      	str	r3, [r5, #0]
 8001d14:	f7ff f87d 	bl	8000e12 <_isatty>
 8001d18:	1c43      	adds	r3, r0, #1
 8001d1a:	d102      	bne.n	8001d22 <_isatty_r+0x1a>
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	b103      	cbz	r3, 8001d22 <_isatty_r+0x1a>
 8001d20:	6023      	str	r3, [r4, #0]
 8001d22:	bd38      	pop	{r3, r4, r5, pc}
 8001d24:	200001f8 	.word	0x200001f8

08001d28 <_lseek_r>:
 8001d28:	b538      	push	{r3, r4, r5, lr}
 8001d2a:	4d07      	ldr	r5, [pc, #28]	@ (8001d48 <_lseek_r+0x20>)
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	4608      	mov	r0, r1
 8001d30:	4611      	mov	r1, r2
 8001d32:	2200      	movs	r2, #0
 8001d34:	602a      	str	r2, [r5, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	f7ff f876 	bl	8000e28 <_lseek>
 8001d3c:	1c43      	adds	r3, r0, #1
 8001d3e:	d102      	bne.n	8001d46 <_lseek_r+0x1e>
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	b103      	cbz	r3, 8001d46 <_lseek_r+0x1e>
 8001d44:	6023      	str	r3, [r4, #0]
 8001d46:	bd38      	pop	{r3, r4, r5, pc}
 8001d48:	200001f8 	.word	0x200001f8

08001d4c <_read_r>:
 8001d4c:	b538      	push	{r3, r4, r5, lr}
 8001d4e:	4d07      	ldr	r5, [pc, #28]	@ (8001d6c <_read_r+0x20>)
 8001d50:	4604      	mov	r4, r0
 8001d52:	4608      	mov	r0, r1
 8001d54:	4611      	mov	r1, r2
 8001d56:	2200      	movs	r2, #0
 8001d58:	602a      	str	r2, [r5, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f7ff f804 	bl	8000d68 <_read>
 8001d60:	1c43      	adds	r3, r0, #1
 8001d62:	d102      	bne.n	8001d6a <_read_r+0x1e>
 8001d64:	682b      	ldr	r3, [r5, #0]
 8001d66:	b103      	cbz	r3, 8001d6a <_read_r+0x1e>
 8001d68:	6023      	str	r3, [r4, #0]
 8001d6a:	bd38      	pop	{r3, r4, r5, pc}
 8001d6c:	200001f8 	.word	0x200001f8

08001d70 <_sbrk_r>:
 8001d70:	b538      	push	{r3, r4, r5, lr}
 8001d72:	4d06      	ldr	r5, [pc, #24]	@ (8001d8c <_sbrk_r+0x1c>)
 8001d74:	2300      	movs	r3, #0
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	602b      	str	r3, [r5, #0]
 8001d7c:	f7ff f862 	bl	8000e44 <_sbrk>
 8001d80:	1c43      	adds	r3, r0, #1
 8001d82:	d102      	bne.n	8001d8a <_sbrk_r+0x1a>
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	b103      	cbz	r3, 8001d8a <_sbrk_r+0x1a>
 8001d88:	6023      	str	r3, [r4, #0]
 8001d8a:	bd38      	pop	{r3, r4, r5, pc}
 8001d8c:	200001f8 	.word	0x200001f8

08001d90 <_write_r>:
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	4d07      	ldr	r5, [pc, #28]	@ (8001db0 <_write_r+0x20>)
 8001d94:	4604      	mov	r4, r0
 8001d96:	4608      	mov	r0, r1
 8001d98:	4611      	mov	r1, r2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	602a      	str	r2, [r5, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f7fe ffff 	bl	8000da2 <_write>
 8001da4:	1c43      	adds	r3, r0, #1
 8001da6:	d102      	bne.n	8001dae <_write_r+0x1e>
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	b103      	cbz	r3, 8001dae <_write_r+0x1e>
 8001dac:	6023      	str	r3, [r4, #0]
 8001dae:	bd38      	pop	{r3, r4, r5, pc}
 8001db0:	200001f8 	.word	0x200001f8

08001db4 <_close_r>:
 8001db4:	b538      	push	{r3, r4, r5, lr}
 8001db6:	4d06      	ldr	r5, [pc, #24]	@ (8001dd0 <_close_r+0x1c>)
 8001db8:	2300      	movs	r3, #0
 8001dba:	4604      	mov	r4, r0
 8001dbc:	4608      	mov	r0, r1
 8001dbe:	602b      	str	r3, [r5, #0]
 8001dc0:	f7ff f80b 	bl	8000dda <_close>
 8001dc4:	1c43      	adds	r3, r0, #1
 8001dc6:	d102      	bne.n	8001dce <_close_r+0x1a>
 8001dc8:	682b      	ldr	r3, [r5, #0]
 8001dca:	b103      	cbz	r3, 8001dce <_close_r+0x1a>
 8001dcc:	6023      	str	r3, [r4, #0]
 8001dce:	bd38      	pop	{r3, r4, r5, pc}
 8001dd0:	200001f8 	.word	0x200001f8

08001dd4 <_fstat_r>:
 8001dd4:	b538      	push	{r3, r4, r5, lr}
 8001dd6:	4d07      	ldr	r5, [pc, #28]	@ (8001df4 <_fstat_r+0x20>)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	4604      	mov	r4, r0
 8001ddc:	4608      	mov	r0, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	602b      	str	r3, [r5, #0]
 8001de2:	f7ff f806 	bl	8000df2 <_fstat>
 8001de6:	1c43      	adds	r3, r0, #1
 8001de8:	d102      	bne.n	8001df0 <_fstat_r+0x1c>
 8001dea:	682b      	ldr	r3, [r5, #0]
 8001dec:	b103      	cbz	r3, 8001df0 <_fstat_r+0x1c>
 8001dee:	6023      	str	r3, [r4, #0]
 8001df0:	bd38      	pop	{r3, r4, r5, pc}
 8001df2:	bf00      	nop
 8001df4:	200001f8 	.word	0x200001f8

08001df8 <_free_r>:
 8001df8:	b538      	push	{r3, r4, r5, lr}
 8001dfa:	4605      	mov	r5, r0
 8001dfc:	2900      	cmp	r1, #0
 8001dfe:	d041      	beq.n	8001e84 <_free_r+0x8c>
 8001e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e04:	1f0c      	subs	r4, r1, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bfb8      	it	lt
 8001e0a:	18e4      	addlt	r4, r4, r3
 8001e0c:	f7ff fe36 	bl	8001a7c <__malloc_lock>
 8001e10:	4a1d      	ldr	r2, [pc, #116]	@ (8001e88 <_free_r+0x90>)
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	b933      	cbnz	r3, 8001e24 <_free_r+0x2c>
 8001e16:	6063      	str	r3, [r4, #4]
 8001e18:	6014      	str	r4, [r2, #0]
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e20:	f7ff be32 	b.w	8001a88 <__malloc_unlock>
 8001e24:	42a3      	cmp	r3, r4
 8001e26:	d908      	bls.n	8001e3a <_free_r+0x42>
 8001e28:	6820      	ldr	r0, [r4, #0]
 8001e2a:	1821      	adds	r1, r4, r0
 8001e2c:	428b      	cmp	r3, r1
 8001e2e:	bf01      	itttt	eq
 8001e30:	6819      	ldreq	r1, [r3, #0]
 8001e32:	685b      	ldreq	r3, [r3, #4]
 8001e34:	1809      	addeq	r1, r1, r0
 8001e36:	6021      	streq	r1, [r4, #0]
 8001e38:	e7ed      	b.n	8001e16 <_free_r+0x1e>
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	b10b      	cbz	r3, 8001e44 <_free_r+0x4c>
 8001e40:	42a3      	cmp	r3, r4
 8001e42:	d9fa      	bls.n	8001e3a <_free_r+0x42>
 8001e44:	6811      	ldr	r1, [r2, #0]
 8001e46:	1850      	adds	r0, r2, r1
 8001e48:	42a0      	cmp	r0, r4
 8001e4a:	d10b      	bne.n	8001e64 <_free_r+0x6c>
 8001e4c:	6820      	ldr	r0, [r4, #0]
 8001e4e:	4401      	add	r1, r0
 8001e50:	1850      	adds	r0, r2, r1
 8001e52:	4283      	cmp	r3, r0
 8001e54:	6011      	str	r1, [r2, #0]
 8001e56:	d1e0      	bne.n	8001e1a <_free_r+0x22>
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	6053      	str	r3, [r2, #4]
 8001e5e:	4408      	add	r0, r1
 8001e60:	6010      	str	r0, [r2, #0]
 8001e62:	e7da      	b.n	8001e1a <_free_r+0x22>
 8001e64:	d902      	bls.n	8001e6c <_free_r+0x74>
 8001e66:	230c      	movs	r3, #12
 8001e68:	602b      	str	r3, [r5, #0]
 8001e6a:	e7d6      	b.n	8001e1a <_free_r+0x22>
 8001e6c:	6820      	ldr	r0, [r4, #0]
 8001e6e:	1821      	adds	r1, r4, r0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	bf04      	itt	eq
 8001e74:	6819      	ldreq	r1, [r3, #0]
 8001e76:	685b      	ldreq	r3, [r3, #4]
 8001e78:	6063      	str	r3, [r4, #4]
 8001e7a:	bf04      	itt	eq
 8001e7c:	1809      	addeq	r1, r1, r0
 8001e7e:	6021      	streq	r1, [r4, #0]
 8001e80:	6054      	str	r4, [r2, #4]
 8001e82:	e7ca      	b.n	8001e1a <_free_r+0x22>
 8001e84:	bd38      	pop	{r3, r4, r5, pc}
 8001e86:	bf00      	nop
 8001e88:	200001f4 	.word	0x200001f4

08001e8c <_init>:
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	bf00      	nop
 8001e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e92:	bc08      	pop	{r3}
 8001e94:	469e      	mov	lr, r3
 8001e96:	4770      	bx	lr

08001e98 <_fini>:
 8001e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9a:	bf00      	nop
 8001e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9e:	bc08      	pop	{r3}
 8001ea0:	469e      	mov	lr, r3
 8001ea2:	4770      	bx	lr
